- id: automations_on
  alias: "automations on"
  initial_state: true
  trigger:
    - platform: state
      entity_id: sensor.bed_occupancy
      to: 'OFF'
    - platform: state
      entity_id: binary_sensor.couch
      to: 'on'
      for:
        seconds: 5
  condition:
  - condition: state
    entity_id: input_boolean.guest
    state: 'off'
  action:
    - service:  automation.turn_on
      data_template:
        entity_id: >
          {%- for state in states.automation if 'ON' in state.name -%}
          {{- ", " if not loop.first-}}{{ state.entity_id }}{{-endif-}}
          {%- endfor -%}
    
- id: automations_off
  alias: "automations off"
  initial_state: true
  trigger:
    - platform: state
      entity_id: sensor.bed_occupancy
      to: 'ON'
    - platform: state
      entity_id: binary_sensor.couch
      to: 'off'
  condition:
  - condition: state
    entity_id: input_boolean.guest
    state: 'off'
  - condition: template
    value_template: "{{ states.sensor.bed_occupancy.state == 'ON' and states.binary_sensor.couch.state == 'off' }}"

  action:
    - service:  automation.turn_off
      data_template:
        entity_id: >
          {%- for state in states.automation if 'ON' in state.name -%}
          {{- ", " if not loop.first-}}{{ state.entity_id }}{{-endif-}}
          {%- endfor -%}
    
- alias: Bed Occupied Tasks
  trigger:
    - platform: state
      entity_id: sensor.bed_occupancy
      to: 'ON'
    - platform: time
      hours: 00
      minutes: 0
      seconds: 0
  condition:
  - condition: time
    after: '23:00:00'
    before: '06:00:00'
  - condition: state
    entity_id: input_boolean.guest
    state: 'off'
  action:
    - service: light.turn_off
      entity_id: group.lights
      data:
        transition: 10

- alias: start spotify
  trigger:
    - platform: state
      entity_id: input_boolean.away
      to: 'off'
  condition:
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.binary_sensor.door_entrance.last_changed) | int < 1800 }}"
  action:
  - service: tts.google_say
    entity_id: media_player.audio_funk
    data:
      message: 'Hey Hey google.... music'

- id: shiny
  alias: 'shiny'
  initial_state: True
  trigger:
    - platform: numeric_state
      entity_id: sensor.temperature_shiny
      above: 30
  action:
    - service: notify.hass
      data_template:
        message: "shiny temp above 30"

- id: onboot
  alias: 'on boot'
  initial_state: True
  hide_entity: True
  trigger:
    - platform: homeassistant
      event: start
  action:
    - service: homeassistant.update_entity
      entity_id: sensor.battery

- id: hammock
  alias: 'hammock'
  initial_state: True
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_living
      to: 'on'
      for:
        seconds: 30
  condition:
    - condition: state
      entity_id: sensor.bar_pir
      state: 'OFF'
      for:
        seconds: 60
    - condition: or
      conditions:
      - condition: state
        entity_id: light.kitchen
        state: 'on'
      - condition: state
        entity_id: light.kitchen_strip
        state: 'on'
  action:
    - service: light.turn_off
      entity_id: light.kitchen, light.kitchen_strip, light.bar

- id: dota_auto
  alias: 'Dota Auto'
  initial_state: True
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_living
      to: 'on'
      for:
        seconds: 30
  condition:
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.sensor.table_pir.last_changed) | int > 30 }}"
    - condition: state
      entity_id: light.table
      state: 'on'
  action:
    - service: light.turn_off
      entity_id: light.table
      
- id: cast
  alias: Cast
  initial_state: True
  trigger:
    - platform: state
      entity_id: media_player.audio_funk
      to: 'idle'
    - platform: state
      entity_id: input_boolean.play
      to: 'on'
  condition:
    - condition: state
      entity_id: input_boolean.play
      state: 'on'
  action:
    - service: shell_command.song
    - service: script.cast
    - delay: '00:00:03'

- id: spotify_ads
  alias: 'Spotify ads'
  initial_state: True
  trigger:
    - platform: template
      value_template: "{{ states.media_player.audio_funk.attributes['media_title'] == 'Spotify' }}"
    - platform: template
      value_template: "{{ states.media_player.audio_funk.attributes['media_title'] == 'Vice Informaci' }}"
  action:
    - service: media_player.volume_mute
      data:
        entity_id: media_player.audio_funk
        is_volume_muted: 'yes'
    - wait_template: >
        {% if states.media_player.audio_funk.attributes['media_title'] != 'Spotify' %} True {% endif %}
      timeout: '00:00:60'
      continue_on_timeout: true
    - wait_template: >
        {% if states.media_player.audio_funk.attributes['media_title'] != 'Vice Informaci' %} True {% endif %}
      timeout: '00:00:60'
      continue_on_timeout: true
    - service: media_player.volume_mute
      data:
        entity_id: media_player.audio_funk
        is_volume_muted: 'no'
      
- id: led_strip
  alias: 'Led Stip Off'
  initial_state: True
  trigger:
    - platform: state
      entity_id: light.kitchen
      to: 'on'
  condition:
    - condition: state
      entity_id: light.kitchen_strip
      state: 'on'
  action:
    - service: light.turn_off
      entity_id: light.kitchen_strip

- id: projector_on
  alias: 'Projector on'
  initial_state: True
  trigger:
    - platform: state
      entity_id: sensor.projector_status
      to: 'on'
  action:
    - service: homeassistant.turn_off
      entity_id: group.guster
    - service: light.turn_on
      entity_id: light.spot

- id: projector_off
  alias: 'Projector off'
  initial_state: True
  trigger:
    - platform: state
      entity_id: sensor.bob
      to: 'OFF'
      for:
        minutes: 20
  condition:
    - condition: state
      entity_id: sensor.projector_status
      state: 'on'
    - condition: state
      entity_id: binary_sensor.motion_living
      state: 'off'
    - condition: template
      value_template: "{{ as_timestamp(now()) - as_timestamp(states.binary_sensor.motion_living.last_changed) | int > 1200 }}"
  action:
    - service: switch.turn_off
      entity_id: switch.projector
    - delay: "00:00:03"
    - wait_template: >
        {% if as_timestamp(now()) - as_timestamp(states.sensor.bob.last_changed) | int > 20 %} True {% endif %}
      timeout: '00:00:10'
      continue_on_timeout: false
    - service_template: >
        {% if as_timestamp(now()) - as_timestamp(states.sensor.bob.last_changed) | int < 20 %} switch.turn_on
        {% else %}switch.turn_off
        {% endif %}
      entity_id: switch.projector_esc, switch.projector

- id: going_to_bed
  alias: 'Going to bed'
  initial_state: True
  trigger:
    - platform: state
      entity_id: sensor.projector_status
      to: 'off'
  condition:
    - condition: state
      entity_id: sun.sun
      state: 'below_horizon'
  action:
    - service: light.turn_on
      entity_id: light.spot
    - wait_template: "{{ states.binary_sensor.motion_living.state == 'on' }}"
      timeout: '00:00:20'
      continue_on_timeout: false
    - service: light.turn_off
      entity_id: light.bob, light.spot

- id: at_wc
  alias: 'at WC'
  initial_state: True
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_wc
      to: 'on'
  condition:
    - condition: state
      entity_id: sensor.house
      state: 'Z'
  action:
    - delay: '00:00:02'
    - service: automation.trigger
      data_template:
          entity_id: >
            {% if as_timestamp(now()) - as_timestamp(states.automation.hallway_on.attributes.last_triggered) | int < 20 %} automation.hallway_off
            {% else %} automation.nothing
            {% endif %}
    - service: automation.trigger
      data_template:
          entity_id: >
            {% if as_timestamp(now()) - as_timestamp(states.automation.kitchen_on.attributes.last_triggered) | int < 20 %} automation.kitchen_off
            {% else %} automation.nothing
            {% endif %}
    - service: automation.trigger
      data_template:
          entity_id: >
            {% if as_timestamp(now()) - as_timestamp(states.automation.dota_table_on.attributes.last_triggered) | int < 20 %} automation.dota_table_off
            {% else %} automation.nothing
            {% endif %}

- id: got_brighter
  alias: 'Got brighter'
  initial_state: True
  trigger:
    - platform: numeric_state
      entity_id: sensor.illumination_living
      above: 70
  condition:
    - condition: state
      entity_id: light.kitchen
      state: 'off'
  action:
    - service: light.turn_off
      entity_id: light.table

- id: lightroom_light
  alias: 'Lightroom Light'
  initial_state: True
  trigger:
    - platform: state
      entity_id: binary_sensor.door_lightroom
  condition:
    - condition: state
      entity_id: input_boolean.guest
      state: 'off'
  action:
    - service_template: >
        {% if trigger.to_state.state == 'on' and states.sensor.illumination_living.state|int <= 50 %} light.turn_on
        {% else %} light.turn_off{% endif %}
      entity_id: light.lightroom
    - delay: '00:00:02'
    - service_template: >
        {% if trigger.to_state.state == 'on' and states.sensor.illumination_living.state|int <= 50 %} light.turn_on
        {% else %} light.turn_off{% endif %}
      entity_id: light.lightroom
    
- id: darkroom_light
  alias: 'Darkroom Light'
  initial_state: False
  trigger:
    - platform: state
      entity_id: binary_sensor.door_darkroom
  condition:
    - condition: state
      entity_id: input_boolean.guest
      state: 'off'
  action:
    - wait_template: >
        {% if trigger.to_state.state == 'on' or (now().strftime('%H')|int >= 0 and now().strftime('%H')|int <= 21) %} True {% endif %}
      timeout: '00:00:10'
      continue_on_timeout: true
    - service_template: >
        {% if trigger.to_state.state == 'on' %} light.turn_on
        {% else %}light.turn_off
        {% endif %}
      entity_id: light.darkroom

- id: bedroom_doors
  alias: 'Bedroom doors'
  initial_state: True
  trigger:
    - platform: state
      entity_id: binary_sensor.door_lightroom, binary_sensor.door_darkroom
      to: 'on'
      for:
        seconds: 300
  action:
    - service: media_player.volume_set
      data:
        entity_id: media_player.living_room_speaker
        volume_level: 0.8
    - service: media_player.play_media
      data:
        entity_id: media_player.living_room_speaker
        media_content_id: !secret door_wav
        media_content_type: music

- id: bedroom_doors_thanks
  alias: 'Bedroom doors closed'
  hide_entity: True
  trigger:
    - platform: state
      entity_id: binary_sensor.door_lightroom, binary_sensor.door_darkroom
      to: 'off'
      for:
        seconds: 1
  condition:
    - condition: template
      value_template: >-
        {%- if states.automation.bedroom_doors.attributes.last_triggered -%}
        {{ as_timestamp(now()) - as_timestamp(states.automation.bedroom_doors.attributes.last_triggered) | int < 100 }}
        {%- else -%} False
        {%- endif -%}
  action:
    - service: media_player.volume_set
      data:
        entity_id: media_player.living_room_speaker
        volume_level: 0.8
    - service: media_player.play_media
      data:
        entity_id: media_player.living_room_speaker
        media_content_id: !secret door_thanks
        media_content_type: music
    - delay: "00:00:05"
    - service: media_player.volume_set
      data:
        entity_id: media_player.living_room_speaker
        volume_level: 0.3

- id: movie_time
  alias: "Movie"
  initial_state: true
  trigger:
    - platform: template
      value_template: "{{ states.sensor.tautulli.attributes['zanerv']['Activity'] == 'playing' }}"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.guest
        state: 'off'
      - condition: state
        entity_id: input_boolean.z
        state: 'on'
      - condition: state
        entity_id: sun.sun
        state: 'below_horizon'
      - condition: state
        entity_id: sensor.couch
        state: 'Detected'
  action:
    - service: light.turn_off
      entity_id: light.bob
    - service: light.turn_on
      entity_id: light.spot

- id: house_mode_us
  alias: "House mode us"
  initial_state: true
  trigger:
    - platform: state
      entity_id: device_tracker.z_phone, device_tracker.r, device_tracker.rdell, device_tracker.rpc
  condition:
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.binary_sensor.door_entrance.last_changed) | int < 1800 }}"
  action:
    - service_template: >
        {% if trigger.to_state.state == 'home' %} homeassistant.turn_on
        {% elif (states.device_tracker.rdell.state == states.device_tracker.r.state == states.device_tracker.rpc.state) or trigger.entity_id == 'device_tracker.z_phone' %} homeassistant.turn_off
        {% else %} script.nothing
        {% endif %}
      data_template:
        entity_id: >
          {% if trigger.entity_id == 'device_tracker.z_phone' %} input_boolean.z
          {% elif trigger.entity_id == 'device_tracker.r' or trigger.entity_id == 'device_tracker.rdell' or trigger.entity_id == 'device_tracker.rpc' %} input_boolean.r
          {% endif %}

- id: house_mode_Z
  alias: "House mode Z"
  initial_state: true
  trigger:
    - platform: state
      entity_id: device_tracker.z_phone
      to: 'home'
      for:
        minutes: 3
  condition:
      - condition: state
        entity_id: input_boolean.z
        state: 'off'
  action:
    - service: homeassistant.turn_on
      entity_id: input_boolean.z

- id: house_mode_R
  alias: "House mode R"
  initial_state: true
  trigger:
    - platform: state
      entity_id: device_tracker.r, device_tracker.rpc, device_tracker.rdell
      to: 'home'
      for:
        minutes: 3
  condition:
      - condition: state
        entity_id: input_boolean.r
        state: 'off'
  action:
    - service: homeassistant.turn_on
      entity_id: input_boolean.r

- id: house_mode_guest
  alias: "House mode guest"
  initial_state: true
  trigger:
    - platform: state
      entity_id: group.guests
      to: 'not_home'
      for:
        seconds: 10
    - platform: state
      entity_id: group.guests
      to: 'home'
      for:
        seconds: 10
  action:
    - service_template: >
        {% if states.group.guests.state == 'home' %} homeassistant.turn_on
        {% else %} homeassistant.turn_off
        {% endif %}
      entity_id: input_boolean.guest

- id: house_mode_away
  alias: "House mode Away"
  initial_state: true
  trigger:
    - platform: state
      entity_id: input_boolean.z, input_boolean.r, input_boolean.guest
  condition:
    condition: or
    conditions:
      - condition: template
        value_template: "{{ states.input_boolean.z.state == 'off' and states.input_boolean.r.state == 'off' and states.input_boolean.guest.state == 'off' }}"
      - condition: template
        value_template: "{{ trigger.to_state.state == 'on' }}"
  action:
    - service_template: >
        {% if trigger.to_state.state == 'off' %} input_boolean.turn_on
        {% else %} input_boolean.turn_off
        {% endif %}
      entity_id: input_boolean.away
    - service_template: >
        {% if  trigger.to_state.state == 'off' %} script.house_mode_away
        {% else %} script.nothing
        {% endif %}

- id: house_mode_vacation
  alias: "House mode Vacation"
  initial_state: true
  trigger:
    - platform: state
      entity_id: input_boolean.away
      to: 'on'
      for:
        hours: 17
    - platform: state
      entity_id: input_boolean.away
      to: 'off'
  action:
    - service_template: >
        {% if trigger.to_state.state == 'on' %} homeassistant.turn_on
        {% else %} homeassistant.turn_off
        {% endif %}
      entity_id: input_boolean.vacation
  
- id: Unknown
  alias: "Home Unknown state"
  initial_state: true
  trigger:
    - platform: state
      entity_id: sensor.house
      to: 'Unknown'
      for:
        seconds: 10
  action:
    - service: notify.hass
      data_template:
        message:  "vacation: {{states.input_boolean.vacation.state}}, away: {{states.input_boolean.away.state}}, guest: {{states.input_boolean.guest.state}}, z: {{states.input_boolean.z.state}}, r: {{states.input_boolean.r.state}}"

- id: Notify_House_Mode
  alias: "Notify House Mode"
  initial_state: true
  trigger:
    - platform: state
      entity_id: input_boolean.vacation, input_boolean.guest, input_boolean.away
  action:
    - service: notify.hass
      data_template:
        title: "{{now().strftime('%H:%M:%S')}}"
        message: >
          {% if trigger.entity_id == 'input_boolean.vacation' %} Vacation Mode is now {{states.input_boolean.vacation.state}}
          {% elif trigger.entity_id == 'input_boolean.away' %} Away Mode is now {{states.input_boolean.away.state}}
          {% elif trigger.entity_id == 'input_boolean.guest' %} Guest Mode is now {{states.input_boolean.guest.state}}
          {% endif %}

- id: Door_lock
  alias: "Door Lock"
  initial_state: true
  trigger:
    - platform: state
      entity_id: sensor.house
      to: 'Away'
      for:
        minutes: 5
  action:
    - service: script.door_lock
    - service: automation.turn_off
      data_template:
        entity_id: >
          {%- for state in states.automation if 'ON' in state.name -%}
          {{- ", " if not loop.first-}}{{ state.entity_id }}{{-endif-}}
          {%- endfor -%}
    
- id: Door_unlock
  alias: "Door Unlock"
  initial_state: true
  trigger:
    - platform: state
      entity_id: input_boolean.away
      to: 'off'
      for:
        seconds: 10
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.binary_sensor.door_entrance.last_changed) | int > 300 }}"
      - condition: template
        value_template: "{{ states.input_boolean.z == 'on' or states.input_boolean.r == 'on' or states.input_boolean.guest == 'on' }}"
      - condition: state
        entity_id: sensor.door
        state: 'Lock'
  action:
    - service: script.door_unlock
       
- id: zriefing
  alias: "Morning Briefing Z"
  initial_state: true
  trigger:
    - platform: time
      at: '07:00'
  condition:
      condition: template
      value_template: "{{ states.input_boolean.z.state == 'on' }}"
  action:
    - service: notify.hass
      data_template:
        title: Today is {{ now().strftime( '%A %d %B ')}}
        message: >
           Outside feels like {{states('sensor.dark_sky_apparent_temperature') | round}}°{{ "\n" }}High is {{states('sensor.dark_sky_daytime_high_apparent_temperature_0')| round}}° {{ "\n" }}Low is {{states('sensor.dark_sky_overnight_low_apparent_temperature_0') | round}}°{{ "\n" }}Forecast is {{states('sensor.dark_sky_summary_0')[:-1]|lower}}{{ "\n" }}
           {{ "\n" }}Storj: {{states.sensor.storj.state}}{{ "\n" }}{{states('sensor.zalendar')}}{{ "\n" }}
           {{ "\n" }}{{states.sensor.quote_of_the_day.state}}

- id: rriefing
  alias: "Morning Briefing R"
  initial_state: false
  trigger:
    - platform: time
      at: '07:00'
  condition:
      condition: template
      value_template: "{{ states.input_boolean.z == 'on' }}"
  action:
    - service: notify.hass
      data_template:
        target:
          - !secret she_mail
        message: >
                  Today is {{ now().strftime( '%a %B %d') }}{{ "\n" }}
                  {{ "\n" }}
                  Outside feels like {{states('sensor.dark_sky_apparent_temperature') | round}}°, high is {{states('sensor.dark_sky_daytime_high_apparent_temperature_0')| round}}° with a low of {{states('sensor.dark_sky_overnight_low_apparent_temperature_0') | round}}°{{ "\n" }}
                  Forecast is {{states('sensor.dark_sky_summary_0')[:-1]|lower}}{{ "\n" }}
                  {{ "\n" }}
                  {{states('sensor.ralendar')}}{{ "\n" }}
                  {{ "\n" }}
                  {%- if states.sensor.quote_of_the_day == 'unknown' -%}
                  Do or do not. There is no Try. 
                  {%- else -%} 
                  {{states.sensor.quote_of_the_day.state}}
                  {%- endif %}

- id: theme
  alias: 'Theme'
  initial_state: True
  trigger:
    - platform: homeassistant
      event: start
    - platform: time
      at: '21:00'
    - platform: time
      at: '06:00'
  action:
    - service: frontend.set_theme
      data_template:
        name: >
          {% if now().strftime('%H')|int >= 0 and now().strftime('%H')|int <= 21 %}
            default
          {% else %}
            Night
          {% endif %}

- id: kitchen_to_couch
  alias: from kitchen to couch
  initial_state: True
  trigger:
    - platform: state
      entity_id: sensor.couch
      to: 'Detected'
  condition:
     condition: and
     conditions:
      - condition: state
        entity_id: light.kitchen
        state: 'on'
      - condition: template
        value_template: '{{ as_timestamp(now()) - as_timestamp(states.light.kitchen.last_changed) | int < 30 }}'
  action:
     - service: light.turn_off
       entity_id: light.kitchen

- id: couch_to_kitchen
  alias: from couch to kitchen
  initial_state: True
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_living
      to: 'on'
  condition:
     condition: and
     conditions:
      - condition: state
        entity_id: input_boolean.z
        state: 'on'
      - condition: numeric_state
        entity_id: sensor.illumination_living
        below: 30
      - condition: state
        entity_id: sensor.couch
        state: 'Clear'
      - condition: state
        entity_id: light.kitchen
        state: 'off'
      - condition: state
        entity_id: sensor.bob
        state: 'ON'
  action:
    # - wait_template: "{{ states.binary_sensor.motion_living.state == 'on' }}"
      # timeout: '00:00:20'
     - service: light.turn_on
       entity_id: light.kitchen_strip

- id: Monkey 
  alias: 'Monkey'
  initial_state: True
  trigger:
    - platform: event
      event_type: xiaomi_aqara.click
      event_data:
        entity_id: binary_sensor.switch_monkey
        click_type: double
    - platform: event
      event_type: xiaomi_aqara.click
      event_data:
        entity_id: binary_sensor.switch_monkey
        event_type: single
  action:
    - service: input_boolean.turn_on
      data:
        entity_id: input_boolean.r
    - service: xiaomi_aqara.play_ringtone
      data:
        gw_mac: !secret xg_mac
        ringtone_id: 10002
        ringtone_vol: 50
        
- id: bedroom_button_single
  alias: 'Bedroom Button single'
  initial_state: true
  trigger:
    - platform: event
      event_type: xiaomi_aqara.click
      event_data:
        entity_id: binary_sensor.switch_bedroom
        event_type: single
  action:
    - service: automation.trigger
      data_template:
        entity_id: >
          {% if states.light.bedroom.state == 'on' %} automation.bedroom_off
          {% else %} automation.bedroom_on
          {% endif %}
        
- id: bedroom_button_double
  alias: 'Bedroom button double'
  initial_state: true
  trigger:
    - platform: event
      event_type: xiaomi_aqara.click
      event_data:
        entity_id: binary_sensor.switch_bedroom
        event_type: double
  action:
    - service: ligh.yeelight_set_mode
      data_template:
        entity_id: light.bedroom
        mode: normal
    - service: light.toggle
      entity_id:  light.bedroom
      data:
        transition: 5
        
- id: location
  alias: 'Last Movement'
  initial_state: True
  trigger:
    #bob
    - platform: state
      entity_id: sensor.bob
      to: 'ON'
    #table
    - platform: state
      entity_id: sensor.table_pir,sensor.bar_pir
      to: 'ON'
    #entrance
    - platform: state
      entity_id: sensor.entrance
      to: 'Motion'
    #kitchen, WC, Living, Hallway, couch
    - platform: state
      entity_id: binary_sensor.motion_wc, binary_sensor.motion_living, binary_sensor.motion_hallway, binary_sensor.couch, binary_sensor.door_lightroom, binary_sensor.door_darkroom, binary_sensor.door_bedroom
      to: 'on'
      for:
        seconds: 0.1
     #bed
    - platform: state
      entity_id: sensor.bed_occupancy
      to: 'OFF'
  action:
      - service: input_select.select_option
        data_template:
         entity_id: input_select.location
         option: >
           {% if trigger.entity_id == "sensor.bob" %} Bob
           {% elif trigger.entity_id == "sensor.table_pir" %} Table
           {% elif trigger.entity_id == "binary_sensor.couch" %} Couch
           {% elif trigger.entity_id == "sensor.entrance" %} Entrance
           {% elif trigger.entity_id == "binary_sensor.motion_bedroom" %} Bedroom
           {% elif trigger.entity_id == "sensor.bar_pir" %} Kitchen
           {% elif trigger.entity_id == "binary_sensor.motion_wc" %} WC
           {% elif trigger.entity_id == "binary_sensor.motion_living" %} Living
           {% elif trigger.entity_id == "binary_sensor.motion_hallway" %} Hallway
           {% elif trigger.entity_id == "binary_sensor.door_lightroom" %} Lightroom
           {% elif trigger.entity_id == "binary_sensor.door_darkroom" %} Darkroom
           {% elif trigger.entity_id == "binary_sensor.door_bedroom" %} Bedroom
           {% elif trigger.entity_id == "sensor.bed_occupancy" %} Bed
           {% endif %}

- id: WC_Auto_OFF
  alias: 'WC Auto OFF'
  initial_state: True
  trigger:
    - platform: state
      entity_id: sensor.bar_pir
      to: 'ON'
      for:
        seconds: 0.1
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.r
        state: 'off'
      - condition: state
        entity_id: input_boolean.guest
        state: 'off'
      - condition: state
        entity_id: light.WC
        state: 'on'
  action:
      service: light.turn_off
      entity_id: light.WC

- id: snoop
  alias: 'snooping'
  initial_state: True
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_bedroom
      to: 'on'
      for:
        seconds: 0.1
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.z
        state: 'off'
      - condition: state
        entity_id: input_boolean.r
        state: 'off'
      - condition: state
        entity_id: input_boolean.guest
        state: 'on'
  action:
    - service: notify.hass
      data:
        target:
          - !secret she_mail
          - !secret he_mail
        message: "Someone is snooping around the bedroom"

- id: got_home
  alias: 'Arrived Home'
  initial_state: True
  trigger:
    - platform: state
      entity_id: binary_sensor.door_entrance
      to: 'on'
      for:
        seconds: 0.1
  action:
    - service: automation.trigger
      entity_id: automation.hallway_on
    # - service: automation.turn_off
      # entity_id: automation.door_unlock
    - service: automation.turn_on
      data_template:
        entity_id: >
          {%- for state in states.automation if 'ON' in state.name -%}
          {{- ", " if not loop.first-}}{{ state.entity_id }}{{-endif-}}
          {%- endfor -%}

- id: door
  alias: 'Door opened'
  initial_state: True
  trigger:
    - platform: state
      entity_id: binary_sensor.door_entrance
      to: 'on'
      for:
        seconds: 0.1
  condition:
    - condition: template
      value_template: "{% if states.device_tracker.z.state != 'home' %}true{% endif %}"
  action:
    - service: notify.hass
      data:
        target:
          - !secret she_mail
          - !secret he_mail
        title: "{{now().strftime('%H:%M:%S')}}"
        message: "Door opened"

- id: Home_Alone
  alias: 'Home Alone'
  initial_state: True
  trigger:
    - platform: state
      entity_id: group.lights
      to: 'on'
      for:
        seconds: 10
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.house
        state: 'Z'
      - condition: state
        entity_id: sun.sun
        state: 'below_horizon'
      - condition: state
        entity_id: sensor.couch
        state: 'Detected'
      - condition: state
        entity_id: input_boolean.guest
        state: 'off'
  action:
    - service: light.turn_off
      data_template:
        entity_id: >
          {%- for state in states.light if state.entity_id != 'light.spot' -%}
          {{- "," if not loop.first-}}{{ state.entity_id }}{{-endif-}}
          {%- endfor -%}

- id: Gateway_ON
  alias: 'Gateway light ON'
  initial_state: True
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_hallway
      from: 'off'
      to: 'on'
      for:
        seconds: 0.1
    - platform: state
      entity_id: sensor.entrance
      to: 'Motion'
  condition:
    condition: numeric_state
    entity_id: sensor.illumination_gateway
    below: 300
  action:
    - service: scene.turn_on
      entity_id: scene.gateway

- id: Gateway_OFF
  alias: 'Gateway light OFF'
  initial_state: True
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_hallway
      to: 'off'
      for:
        minutes: 5
    - platform: state
      entity_id: sensor.entrance
      to: 'Still'
      for:
        minutes: 5
  action:
    - service: light.turn_off
      entity_id: light.gateway

- id: Bedroom_ON
  alias: 'Bedroom ON'
  initial_state: True
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_bedroom
      to: 'on'
      for:
        seconds: 0.1
    - platform: state
      entity_id: sensor.bed_occupancy
      to: 'OFF'
      for:
        seconds: 2
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{% if states.media_player.firetv.state != 'playing' %}true{% endif %}"
      - condition: state
        entity_id: sensor.bed_occupancy
        state: 'OFF'
  action:
    - service: light.yeelight_set_mode
      data_template:
        entity_id: light.bedroom
        mode: >
         {% if now().strftime('%H')|int >= 22 or (now().strftime('%H')|int <= 7 and now().strftime('%M')|int <= 50) %}
           moonlight
         {% else %}
           normal
         {% endif %}
    - service: scene.turn_on
      data_template:
        entity_id: >
         {% if now().strftime('%H')|int >= 22 or (now().strftime('%H')|int <= 7 and now().strftime('%M')|int <= 50) %}
           scene.bedroom_night
         {% else %}
           scene.bedroom_day
         {% endif %}

- id: Bedroom_OFF
  alias: 'Bedroom OFF'
  initial_state: True
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_bedroom
      to: 'off'
    - platform: state
      entity_id: media_player.firetv
      from: 'off'
    - platform: state
      entity_id: sensor.bed_occupancy
      to: 'ON'
    - platform: state
      entity_id: media_player.firetv
      to: 'playing'
  condition:
      - condition: state
        entity_id: light.bedroom
        state: 'on'
  action:
      service: light.turn_off
      entity_id: light.bedroom

- id: Kitchen_ON
  alias: 'Kitchen ON'
  initial_state: True
  trigger:
    - platform: state
      entity_id: sensor.bar_pir
      to: 'ON'
      for:
        seconds: 0.1
  condition:
      - condition: numeric_state
        entity_id: sensor.illumination_living
        below: 30
      - condition: or
        conditions:
        - condition: state
          entity_id: light.kitchen
          state: 'off'
        - condition: state
          entity_id: light.kitchen_strip
          state: 'off'
        - condition: state
          entity_id: light.bar
          state: 'off'
  action:
      - service: scene.turn_on
        data_template:
          entity_id: >
            {% if now().strftime('%H')|int >= 0 and (now().strftime('%H')|int <= 7 and now().strftime('%M')|int < 50) %}
              scene.kitchen_night
            {% else %}
              scene.kitchen_day
            {% endif %}
- id: Kitchen_OFF
  alias: 'Kitchen OFF'
  initial_state: True
  trigger:
    - platform: state
      entity_id: sensor.bar_pir
      to: 'OFF'
      for:
        minutes: 5
  action:
      service: light.turn_off
      entity_id: light.kitchen, light.kitchen_strip, light.bar

- id: Dota_ON
  alias: 'Dota Table ON'
  initial_state: True
  trigger:
    - platform: state
      entity_id: sensor.table_pir
      to: 'ON'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: light.table
        state: 'off'
      - condition: numeric_state
        entity_id: sensor.illumination_living
        below: 35
  action:
      service: light.turn_on
      entity_id: light.table

- id: Dota_OFF
  alias: 'Dota Table OFF'
  initial_state: True
  trigger:
    - platform: state
      entity_id: sensor.table_pir
      to: 'OFF'
      for:
        minutes: 7
  action:
      service: light.turn_off
      entity_id: light.table

- id: Bob_ON
  alias: 'Bob ON'
  initial_state: True
  trigger:
    - platform: state
      entity_id: sensor.bob
      to: 'ON'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.mmode
        state: 'on'
      - condition: state
        entity_id: light.bob
        state: 'off'
      - condition: template
        value_template: "{% if states.sensor.house.state != 'Away' or states.sensor.house.state != 'Vacation' %}true{% endif %}"
      - condition: sun
        after: sunset
        after_offset: "-00:15:00"
  action:
      - service: light.turn_on
        entity_id: light.bob
        data_template:
          brightness: >
            {% if now().strftime('%H')|int >= 0 and (now().strftime('%H')|int <= 7 and now().strftime('%M')|int < 50) %}26
            {% else %}255
            {% endif %}

- id: Bob_OFF
  alias: 'Bob OFF'
  initial_state: True
  trigger:
    - platform: state
      entity_id: sensor.bob
      to: 'OFF'
      for:
        minutes: 15
  condition:
      condition: state
      entity_id: binary_sensor.motion_living
      state: 'off'
      for:
        minutes: 15
  action:
      service: light.turn_off
      entity_id: light.bob, light.spot
#, switch.projector

- id: Bob_auto_on
  alias: 'Bob Auto on'
  initial_state: True
  trigger:
    - platform: state
      entity_id: sensor.bob
      to: 'OFF'
      for:
        minutes: 15
  condition:
    condition: state
    entity_id: input_boolean.mmode
    state: 'off'
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.mmode

- id: Hallway_ON
  alias: 'Hallway ON'
  initial_state: True
  trigger:
    - platform: state
      entity_id: sensor.entrance
      to: 'Motion'
    - platform: state
      entity_id: binary_sensor.motion_hallway
      to: 'on'
      for:
        seconds: 0.1
    - platform: state
      entity_id: binary_sensor.door_bedroom, binary_sensor.door_lightroom, binary_sensor.door_darkroom, binary_sensor.door_bathroom
      to: 'on'
  condition:
    condition: and
    conditions:
      - condition: numeric_state
        entity_id: sensor.illumination_hallway
        below: 50
      - condition: template
        value_template: "{% if states.sensor.house.state != 'Away' or states.sensor.house.state != 'Vacation' %}true{% endif %}"
  action:
    - service: scene.turn_on
      data_template:
        entity_id: >
          {% if now().strftime('%H')|int >= 0 and (now().strftime('%H')|int <= 7 and now().strftime('%M')|int <= 50) %}
            scene.hallway_night
          {% else %}
            scene.hallway_day
          {% endif %}

- id: Hallway_OFF
  alias: 'Hallway OFF'
  initial_state: True
  trigger:
    - platform: state
      entity_id: sensor.entrance
      to: 'Still'
      for:
        seconds: 30
    - platform: state
      entity_id: binary_sensor.motion_hallway
      to: 'off'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: binary_sensor.motion_hallway
        state: 'off'
      - condition: state
        entity_id: sensor.entrance
        state: 'Still'
        for: 
          seconds: 30
  action:
      service: light.turn_off
      entity_id: light.Hallway1,light.Hallway2,light.Hallway3

- id: WC_ON
  alias: 'WC ON'
  initial_state: True
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_wc
      to: 'on'
  condition:
    condition: and
    conditions:
      - condition: numeric_state
        entity_id: sensor.illumination_wc
        below: 20
  action:
    - service: scene.turn_on
      data_template:
        entity_id: >
          {% if now().strftime('%H')|int >= 02 and (now().strftime('%H')|int <= 7 and now().strftime('%M')|int <= 50) %}scene.wc_night
          {% else %}scene.wc_day
          {% endif %}

- id: WC_OFF
  alias: 'WC OFF'
  initial_state: True
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_wc
      to: 'off'
      for:
        seconds: 30
  action:
      service: light.turn_off
      entity_id: light.WC

- id: Bathroom_ON
  alias: 'Bathroom ON'
  initial_state: True
  trigger:
    - platform: state
      entity_id: sensor.bathroom_pir
      to: 'ON'
  action:
    - service: light.turn_on
      entity_id: light.bathroom

- id: Bathroom_OFF
  alias: 'Bathroom OFF'
  initial_state: True
  trigger:
    - platform: state
      entity_id: sensor.bathroom_pir
      to: 'OFF'
      for:
        minutes: 5
    - platform: state
      entity_id: binary_sensor.door_bathroom
      to: 'on'
      for:
        seconds: 30
  condition:
  - condition: state
    entity_id: binary_sensor.door_bathroom
    state: 'on'
  - condition: state
    entity_id: sensor.bathroom_pir
    state: 'OFF'
    for:
      minutes: 1
  action:
      service: light.turn_off
      entity_id: light.bathroom

- id: Riki
  alias: 'Feed ze animal 7:20&14&18'
  initial_state: True
  trigger: 
    - platform: time
      hours: 07
      minutes: 20
      seconds: 0
    - platform: time
      hours: 14
      minutes: 0
      seconds: 0
    - platform: time
      hours: 18
      minutes: 0
      seconds: 0
  action:
      - service: switch.turn_on
        entity_id: switch.riki_s_food

####Monitor devices####
- id: new_device
  alias: 'Notify for new devices'
  initial_state: True
  trigger:
    - platform: event
      event_type: device_tracker_new_device
  action:
    - service: notify.hass
      data_template:
        message: >
         New entity ID {{ trigger.event.data.entity_id }} and hostname {{ trigger.event.data.host_name }}
    - service: shell_command.echo_groups
      data_template: 
        arg: "{{ trigger.event.data.entity_id }}"
    - service: group.reload

- id: 2c0e3de5e904
  hide_entity: True
  alias: 'Unknown MACs'
  initial_state: true
  trigger:
    - platform: state
      entity_id: !secret unknown_mac
  action:
    - service: notify.hass
      data_template:
        message: "One of the tracked devices has connected {{ trigger.entity_id }} and hostname {{ trigger.host_name }}"

- id: 'Sunset'
  alias: 'Sunset'
  initial_state: True
  trigger:
    - platform: sun
      event: sunset
      offset: '-00:35:00'
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.mmode

- id: launch_notify
  initial_state: True
  alias: Launch Notify
  trigger:
    - platform: template
      value_template: '{{ (now().strftime("%s") | int + 600) == (states.sensor.spacex.state | int) }}'
    - platform: template
      value_template: '{{ (now().strftime("%s") | int + 600) == (as_timestamp(states.sensor.launch.attributes.launch_time) | int) }}'
  action:
    - service: script.spacex

####Cube####
- id: cube_rotate
  alias: 'Cube rotate'
  initial_state: True
  trigger:
    - platform: event
      event_type: xiaomi_aqara.cube_action
      event_data:
        entity_id: binary_sensor.cube
        action_type: rotate
  action:
    - service: homeassistant.toggle
      entity_id: group.guster

- id: tap_twice
  alias: 'Cube tap'
  initial_state: True
  trigger:
    - platform: event
      event_type: xiaomi_aqara.cube_action
      event_data:
        entity_id: binary_sensor.cube
        action_type: tap_twice
  action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.mmode
    - service: light.turn_off
      entity_id: light.kitchen, light.kitchen_strip, light.table, light.bob, light.bar

- id: flip90
  alias: 'Cube flip90'
  initial_state: True
  trigger:
    - platform: event
      event_type: xiaomi_aqara.cube_action
      event_data:
        entity_id: binary_sensor.cube
        action_type: flip90
  action:
    - service: light.toggle
      entity_id: light.kitchen,light.kitchen_strip,light.bar

- id: flip180
  alias: 'Cube flip180'
  initial_state: True
  trigger:
    - platform: event
      event_type: xiaomi_aqara.cube_action
      event_data:
        entity_id: binary_sensor.cube
        action_type: flip180
  action:
    - service: light.toggle
      entity_id: light.table 

- id: free_fall
  alias: 'Cube toggle'
  initial_state: True
  trigger:
    - platform: event
      event_type: xiaomi_aqara.cube_action
      event_data:
        entity_id: binary_sensor.cube
        action_type: free_fall
  action:
    - service: automation.toggle
      entity_id: automation.cube_rotate, automation.cube_flip90, automation.cube_flip180, automation.cube_tap, automation.cube_shake
    - service: light.toggle
      entity_id: light.bob
    - delay: '00:00:01'
    - service: light.toggle
      entity_id: light.bob

- id: shake_air
  alias: 'Cube shake'
  initial_state: True
  trigger:
    - platform: event
      event_type: xiaomi_aqara.cube_action
      event_data:
        entity_id: binary_sensor.cube
        action_type: shake_air
  action:
    - service: light.toggle  
      entity_id: light.spot

- id: shake_air_bob
  alias: 'Cube shake bob'
  initial_state: True
  trigger:
    - platform: event
      event_type: xiaomi_aqara.cube_action
      event_data:
        entity_id: binary_sensor.cube
        action_type: shake_air
  action:
    - service: light.turn_off  
      entity_id: light.bob
    - service: input_boolean.turn_off
      entity_id: input_boolean.mmode

- id: move
  alias: 'Cube move'
  initial_state: False
  hide_entity: True
  trigger:
    - platform: event
      event_type: xiaomi_aqara.cube_action
      event_data:
        entity_id: binary_sensor.cube
        action_type: move
  action:
    - service: mqtt.publish
      data:
        topic: say/Z
        payload: "Garage door triggered"
        qos: 0
    - service: notify.hass
      data:
        message: "Hauarde"

- id: alert
  alias: 'Cube Alert'
  initial_state: False
  hide_entity: True
  trigger:
    - platform: event
      event_type: xiaomi_aqara.cube_action
      event_data:
        entity_id: binary_sensor.cube
        action_type: alert
  action:
    - service: notify.hass
      data_template:
        title: test
        message: "{{now().strftime('%H')}}"

- id: swing
  alias: 'Cube Swing'
  initial_state: True
  trigger:
    - platform: event
      event_type: xiaomi_aqara.cube_action
      event_data:
        entity_id: binary_sensor.cube
        action_type: swing
  action:
    - service: notify.hass
      data:
        title: Swing
        message: Cube swing

- id: lights_refresh
  alias: 'lights_refresh'
  initial_state: False
  trigger:
    - platform: time
      minutes: '/60'
      seconds: 00
  action:
    - service: light.turn_off
      data_template:
        entity_id: >
          {%- for i in states.light if i.state == 'off' -%}
          {{- "," if not loop.first-}}{{ i.entity_id }}{{-endif-}}
          {%- endfor -%}
    - service: light.turn_on
      data_template:
        entity_id: >
          {%- for i in states.light if i.state == 'on' -%}
          {{- "," if not loop.first-}}{{ i.entity_id }}{{-endif-}}
          {%- endfor -%}

- id: unavailable
  alias: 'unavailable'
  initial_state: False
  trigger:
    - platform: state
      entity_id: light.bob, light.wc, light.kitchen, light.Hallway1, light.table
      to: 'unavailable'
      for:
        seconds: 5
  action:
    - service: xiaomi_aqara.play_ringtone
      data:
        gw_mac: !secret xg_mac
        ringtone_id: 10001
        ringtone_vol: 3
    - service: notify.hass
      data_template:
        message: '{{ states[trigger.entity_id.split(".")[0]][ trigger.entity_id.split(".")[1]].name }}'

- id: purge
  alias: 'purge'
  initial_state: True
  trigger:
  action:
     - service: recorder.purge
       data:
         keep_days: 1
         repack: true

- id: nothing
  alias: 'nothing'
  hide_entity: True
  initial_state: false
  trigger:
  action: