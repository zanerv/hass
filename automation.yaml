- id: spotify_ads
  alias: 'Spotify ads'
  initial_state: True
  trigger:
    platform: template
    # value_template: "{{ states.media_player.audio_funk.attributes['media_title'] }}"
    value_template: "{%if is_state_attr('media_player.audio_funk', 'media_title', 'Spotify') %}true{%endif%}"
  action:
    - service: media_player.volume_mute
      entity_id: media_player.audio_funk
    - service: notify.hass
      data_template:
        title: "Spotify ads"
        message: "Title: {{states.media_player.audio_funk.attributes['media_title']}}, Artist: {{states.media_player.audio_funk.attributes['media_artist']}}"
    - service_template: >
        {% if states.media_player.audio_funk.attributes['media_title'] == 'Spotify' %} is_volume_muted: true
        {% else %}is_volume_muted: false
        {% endif %}
      entity_id: media_player.audio_funk

- id: led_strip
  alias: 'Led Stip Off'
  initial_state: True
  trigger:
    platform: state
    entity_id: light.kitchen
    to: 'on'
  condition:
    - condition: state
      entity_id: light.kitchen_strip
      state: 'on'
  action:
    - service: light.turn_off
      entity_id: light.kitchen_strip

- id: ac_off
  alias: 'AC Off'
  initial_state: False
  trigger:
    platform: numeric_state
    entity_id: sensor.temperature_living
    below: 27.5
    above: 29.5
  action:
    - service_template: >
        {% if states.sensor.temperature_living.state <= '27.5' %} switch.turn_off
        {% elif states.sensor.temperature_living.state >= '29.5' %}switch.turn_on
        {% endif %}
      entity_id: switch.ac

- id: projector_on
  alias: 'Projector on'
  initial_state: True
  trigger:
    platform: state
    entity_id: sensor.projector_status
    to: 'on'
  action:
    - service: homeassistant.turn_off
      entity_id: group.guster
    - service: light.turn_on
      entity_id: light.spot

- id: projector_off
  alias: 'Projector off'
  initial_state: True
  trigger:
    - platform: state
      entity_id: sensor.bob
      to: 'OFF'
      for:
        minutes: 15
    - platform: state
      entity_id: sensor.projector_status
      to: 'on'
      for:
        minutes: 180
  condition:
    - condition: state
      entity_id: sensor.projector_status
      state: 'on'
  action:
    - service: switch.turn_off
      entity_id: switch.projector
    - delay: 00:00:03
    - service_template: >
        {% if (as_timestamp(now()) - as_timestamp(states.sensor.bob.last_changed)) < 20 %} switch.turn_on
        {% else %}switch.turn_off
        {% endif %}
      entity_id: switch.projector_esc

- id: going_to_bed
  alias: 'Going to bed'
  initial_state: True
  trigger:
    - platform: state
      entity_id: sensor.projector_status
      to: 'off'
  condition:
    - condition: state
      entity_id: sun.sun
      state: 'below_horizon'
  action:
    - service: light.turn_on
      entity_id: light.spot
    - wait_template: "{{ states.binary_sensor.motion_sensor_living.state == 'on' }}"
      timeout: '00:00:20'
      continue_on_timeout: false
    - service: light.turn_off
      entity_id: light.bob, light.spot

- id: at_wc
  alias: 'at WC'
  initial_state: True
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_sensor_wc
      to: 'on'
  action:
    - delay: '00:00:02'
    - service: automation.trigger
      data_template:
          entity_id: >
            {% if (as_timestamp(now()) - as_timestamp(states.automation.hallway_on.attributes.last_triggered)) < 20 %} automation.hallway_off
            {% else %} automation.nothing
            {% endif %}
    - service: automation.trigger
      data_template:
          entity_id: >
            {% if (as_timestamp(now()) - as_timestamp(states.automation.kitchen_on.attributes.last_triggered)) < 20 %} automation.kitchen_off
            {% else %} automation.nothing
            {% endif %}
    - service: automation.trigger
      data_template:
          entity_id: >
            {% if (as_timestamp(now()) - as_timestamp(states.automation.dota_table_on.attributes.last_triggered)) < 20 %} automation.dota_table_off
            {% else %} automation.nothing
            {% endif %}

- id: nothing
  alias: 'nothing'
  hide_entity: True
  initial_state: false
  trigger:
  action:

- id: got_brighter
  alias: 'Got brighter'
  initial_state: True
  trigger:
    - platform: numeric_state
      entity_id: sensor.illumination_kitchen
      above: 80
  condition:
    - condition: state
      entity_id: light.kitchen
      state: 'off'
  action:
    - service: light.turn_off
      entity_id: light.masa

- id: bedroom_lights
  alias: 'Bedroom Lights'
  initial_state: True
  trigger:
    - platform: state
      entity_id: binary_sensor.door_lightroom, binary_sensor.door_darkroom
  condition:
    - condition: state
      entity_id: input_boolean.guest
      state: 'off'
  action:
    - service_template: >
        {% if trigger.to_state.state  == 'on' %} light.turn_on
        {% else %}light.turn_off
        {% endif %}
      data_template:
        entity_id: >
          {% if trigger.entity_id  == 'binary_sensor.door_lightroom' and states.sensor.illumination_kitchen.state <= '30'%} light.lightroom
          {% elif trigger.entity_id  == 'binary_sensor.door_darkroom' %}light.darkroom
          {% else %} light.gateway
          {% endif %}

- id: bedroom_doors
  alias: 'Bedroom doors'
  initial_state: True
  trigger:
    - platform: state
      entity_id: binary_sensor.door_lightroom, binary_sensor.door_darkroom
      to: 'on'
      for:
        seconds: 300
  action:
    - service: media_player.volume_set
      data_template:
        entity_id: media_player.living_room_speaker
        volume_level: 0.8
    - service: media_player.play_media
      data:
        entity_id: media_player.living_room_speaker
        media_content_id: !secret door_wav
        media_content_type: music

- id: bedroom_doors_thanks
  alias: 'Bedroom doors closed'
  hide_entity: True
  initial_state: True
  trigger:
    - platform: state
      entity_id: binary_sensor.door_lightroom, binary_sensor.door_darkroom
      to: 'off'
      for:
        seconds: 1
  condition:
    condition: template
    value_template: "{% if (as_timestamp(now()) - as_timestamp(states.automation.bedroom_doors.attributes.last_triggered)) < 100 %}true{% endif %}"
  action:
    - service: media_player.volume_set
      data_template:
        entity_id: media_player.living_room_speaker
        volume_level: 0.8
    - service: media_player.play_media
      data:
        entity_id: media_player.living_room_speaker
        media_content_id: !secret door_thanks
        media_content_type: music
    - service: media_player.volume_set
      data_template:
        entity_id: media_player.living_room_speaker
        volume_level: 0.3

- id: Unknown
  alias: "Home Unknown state"
  initial_state: 'on'
  trigger:
      - platform: state
        entity_id: sensor.house
        to: 'Unknown'
        for:
          seconds: 10
  action:
    - service: notify.hass
      data_template:
        message:  "vacation: {{states.input_boolean.vacation.state}}, away: {{states.input_boolean.away.state}}, guest: {{states.input_boolean.guest.state}}, z: {{states.input_boolean.z.state}}, r: {{states.input_boolean.r.state}}"

# - id: vacation
  # alias: "Vacatiom"
  # initial_state: 'on'
  # trigger:
      # - platform: state
        # entity_id: sensor.house
  # action:
    # - service_template: >
        # {% if states.sensor.house.state == 'Vacation' %} switch.turn_off
        # {% else %}switch.turn_on
        # {% endif %}
      # entity_id: switch.trantor_power

- id: movie_time
  alias: "Movie"
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: sensor.tautulli
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.guest
        state: 'off'
      - condition: state
        entity_id: input_boolean.z
        state: 'on'
      - condition: state
        entity_id: sun.sun
        state: 'below_horizon'
      - condition: state
        entity_id: sensor.couch
        state: 'Detected'
      - condition: template
        value_template: "{% if states.sensor.tautulli.state == 'play' or states.sensor.tautulli.state == 'stop' %}true{% endif %}"
  action:
    - service_template: >
        {% if states.sensor.tautulli.state == 'play' %} homeassistant.turn_off
        {% elif states.sensor.tautulli.state == 'stop' %} homeassistant.turn_on
        {% endif %}
      entity_id: group.guster
    - service_template: >
        {% if states.sensor.tautulli.state == 'play' %} light.turn_on
        {% elif states.sensor.tautulli.state == 'stop' %} light.turn_off
        {% endif %}
      entity_id: light.spot

- id: house_mode_guest
  alias: "House mode guest"
  initial_state: 'on'
  trigger:
      - platform: state
        entity_id: group.guests
  action:
    - service_template: >
        {% if states.group.guests.state == 'home' %} homeassistant.turn_on
        {% elif states.group.guests.state == 'not_home'%} homeassistant.turn_off
        {% endif %}
      entity_id: input_boolean.guest

- id: house_mode_user_z
  alias: "House mode user Z"
  initial_state: 'on'
  trigger:
      - platform: state
        entity_id: device_tracker.z
  condition:
    condition: template
    value_template: "{% if (as_timestamp(now()) - as_timestamp(states.binary_sensor.door_entrance.last_changed)) < 1800 %}true{% endif %}"
  action:
    - service_template: >
        {% if states.device_tracker.z.state == 'home' %} homeassistant.turn_on
        {% elif states.device_tracker.z.state != 'home'%} homeassistant.turn_off
        {% endif %}
      entity_id: input_boolean.z
    
- id: house_mode_user_r
  alias: "House mode user R"
  initial_state: 'on'
  trigger:
      - platform: state
        entity_id: device_tracker.r
  condition:
    condition: template
    value_template: "{% if (as_timestamp(now()) - as_timestamp(states.binary_sensor.door_entrance.last_changed)) < 1800 %}true{% endif %}"
  action:
    - service_template: >
        {% if states.device_tracker.rdell.state == 'home' or states.device_tracker.r.state == 'home' %} homeassistant.turn_on
        {% elif states.device_tracker.rdell.state != 'home' or states.device_tracker.r.state != 'home'%} homeassistant.turn_off
        {% endif %}
      entity_id: input_boolean.r

- id: house_mode_away
  alias: "House mode Away"
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: input_boolean.z, input_boolean.r, input_boolean.guest
  action:
    - service_template: >
        {% if states.input_boolean.z.state == 'off' and states.input_boolean.r.state == 'off' and states.input_boolean.guest.state == 'off' %} input_boolean.turn_on
        {% elif states.input_boolean.z.state == 'on' or states.input_boolean.r.state == 'on' or states.input_boolean.guest.state == 'on' %} input_boolean.turn_off
        {% endif %}
      entity_id: input_boolean.away
    - service_template: >
        {% if states.input_boolean.away.state == 'on' %} script.house_mode_away, script.door_lock
        {% else %} script.nothing
        {% endif %}
    - service_template: >
        {% if (as_timestamp(now()) - as_timestamp(states.input_boolean.away.last_changed)) < 60 %} notify.hass
        {% else %} script.nothing
        {% endif %}
      data_template:
        message: >
         {% if states.input_boolean.away.state == 'off' and states.input_boolean.guest.state == 'off' %} Alarm is disarmed, Welcome Home
         {% elif states.input_boolean.away.state == 'on' and states.input_boolean.guest.state == 'off' %} Alarm is armed, House set to Away Mode
         {% endif %}

- id: house_mode_vacation
  alias: "House mode Vacation"
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: input_boolean.away
      to: 'on'
      for:
        hours: 17
    - platform: state
      entity_id: input_boolean.away
      to: 'off'
  action:
    - service_template: >
        {% if states.input_boolean.vacation.state == 'off' and states.input_boolean.away.state == 'on' %} homeassistant.turn_on
        {% elif states.input_boolean.vacation.state == 'on' and states.input_boolean.away.state == 'off' %} homeassistant.turn_off
        {% endif %}
      entity_id: input_boolean.vacation
  
- id: Notify_Vacation_Mode
  alias: "Notify Vacation Mode"
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: input_boolean.vacation
  action:
    - service: notify.hass
      data:
        message: 'Vacation Mode is now {{states.input_boolean.vacation.state}}'

- id: Door_lock
  alias: "Door Lock"
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: sensor.house
      to: 'Away'
      for:
        minutes: 1
  action:
    - service: script.door_lock
    
- id: Door_unlock
  alias: "Door Unlock"
  initial_state: 'off'
  trigger:
    - platform: state
      entity_id: sensor.house
      from: 'Away'
  action:
    - service: script.door_unlock
    
- id: Notify_Guest_Mode
  alias: "Notify Guest Mode"
  initial_state: 'off'
  trigger:
    - platform: state
      entity_id: input_boolean.guest
  action:
    - service: notify.hass
      data:
        message: 'Guest Mode is now {{states.input_boolean.guest.state}}'

- id: zriefing
  alias: "Morning Briefing Z"
  initial_state: 'on'
  trigger:
    platform: time
    at: '07:00'
  condition:
    condition: template
    value_template: "{% if states.input_boolean.z.state == 'on' %}true{% endif %}"
  action:
    - service: notify.hass
      data_template:
        message: >
                  Today is {{ now().strftime( '%a %B %d') }}{{ "\n" }}
                  {{ "\n" }}
                  Outside feels like {{states('sensor.dark_sky_apparent_temperature') | round}}°, high is {{states('sensor.dark_sky_daytime_high_apparent_temperature')| round}}° with a low of {{states('sensor.dark_sky_overnight_low_apparent_temperature') | round}}°, {{states('sensor.dark_sky_template')|lower}} skies.{{ "\n" }}
                  Forecast is {{states('sensor.dark_sky_hourly_summary')[:-1]|lower}}{{ "\n" }}
                  {{ "\n" }}
                  {{states('sensor.zalendar')}}{{ "\n" }}
                  {{ "\n" }}
                  {%- if is_state("sensor.quote_of_the_day", "unknown") -%}
                  Do or do not. There is no Try.
                  {%- else -%}
                  {{states.sensor.quote_of_the_day.state}}
                  {%- endif %}

- id: rriefing
  alias: "Morning Briefing R"
  initial_state: 'on'
  trigger:
    platform: time
    at: '07:00'
  condition:
    condition: template
    value_template: "{% if states.input_boolean.r.state == 'on' %}true{% endif %}"
  action:
    - service: notify.hass
      data_template:
        target:
          - !secret she_mail     
        message: >
                  Today is {{ now().strftime( '%a %B %d') }}{{ "\n" }}
                  {{ "\n" }}
                  Outside feels like {{states('sensor.dark_sky_apparent_temperature') | round}}°, high is {{states('sensor.dark_sky_daytime_high_apparent_temperature')| round}}° with a low of {{states('sensor.dark_sky_overnight_low_apparent_temperature') | round}}°, {{states('sensor.dark_sky_template')|lower}} skies.{{ "\n" }}
                  Forecast is {{states('sensor.dark_sky_hourly_summary')[:-1]|lower}}{{ "\n" }}
                  {{ "\n" }}
                  {{states('sensor.ralendar')}}{{ "\n" }}
                  {{ "\n" }}
                  {%- if is_state("sensor.quote_of_the_day", "unknown") -%}
                  Do or do not. There is no Try. 
                  {%- else -%} 
                  {{states.sensor.quote_of_the_day.state}}
                  {%- endif %}


- id: restart_firetv
  alias: 'Restart FireTv'
  initial_state: True
  trigger:
     - platform: numeric_state
       entity_id: sensor.firetv
       above: 0
  action:
      - service: shell_command.restart_firetv
      - delay: '00:00:20'

- id: theme
  alias: 'Theme'
  initial_state: True
  trigger:
     - platform: homeassistant
       event: start
     - platform: time
       at: '21:00'
  action:
      - service: frontend.set_theme
        data_template:
          name: >
            {% if now().strftime('%H')|int >= 0 and now().strftime('%H')|int <= 21 %}
              default
            {% else %}
              Night
            {% endif %}

- id: kitchen_to_couch
  alias: from kitchen to couch
  initial_state: True
  trigger:
     - platform: state
       entity_id: sensor.couch
       to: 'Detected'
  condition:
     condition: and
     conditions:
      - condition: state
        entity_id: light.kitchen
        state: 'on'
      - condition: template
        value_template: '{{(as_timestamp(now()) - as_timestamp(states.light.kitchen.last_changed) < 30)}}'
  action:
     - service: light.turn_off
       entity_id: light.kitchen

- id: couch_to_kitchen
  alias: from couch to kitchen
  initial_state: True
  trigger:
     - platform: state
       entity_id: binary_sensor.motion_sensor_living
       to: 'on'
  condition:
     condition: and
     conditions:
      - condition: state
        entity_id: input_boolean.z
        state: 'on'
      - condition: numeric_state
        entity_id: sensor.illumination_kitchen
        below: 30
      - condition: state
        entity_id: sensor.couch
        state: 'Clear'
      - condition: state
        entity_id: light.kitchen
        state: 'off'
      - condition: state
        entity_id: sensor.bob
        state: 'ON'
  action:
    # - wait_template: "{{ states.binary_sensor.motion_sensor_living.state == 'on' }}"
      # timeout: '00:00:20'
     - service: light.turn_on
       entity_id: light.kitchen_strip

- id: Monkey
  alias: 'Monkey'
  initial_state: True
  trigger:
    platform: event
    event_type: click
    event_data:
      entity_id: binary_sensor.switch_monkey
      click_type: long_click_press
  action:
    - service: input_boolean.turn_on
      data:
        entity_id: input_boolean.r
    - service: xiaomi_aqara.play_ringtone
      data:
        gw_mac: !secret xg_mac
        ringtone_id: 10002
        ringtone_vol: 50
        
- id: button
  alias: Button
  initial_state: true
  trigger:
   - platform: event
     event_type: click
     event_data:
       entity_id: binary_sensor.switch_living
       event_type: click
  action:
    # - service:  media_player.play_media
      # data:
        # entity_id: media_player.living_room_speaker
        # media_content_id: !secret wav1_url
        # media_content_type: music
    - service: xiaomi_aqara.play_ringtone
      data_template:
        gw_mac: !secret xg_mac
        ringtone_vol: 10
        ringtone_id: '{{ (range(10000, 10003)|random) }}'
        
- id: unavailable
  alias: 'unavailable'
  initial_state: False
  trigger:
    - platform: state
      entity_id: light.bob, light.wc, light.kitchen, light.Hallway1, light.masa
      to: 'unavailable'
      for:
        seconds: 5
  action:
    - service: xiaomi_aqara.play_ringtone
      data:
        gw_mac: !secret xg_mac
        ringtone_id: 10001
        ringtone_vol: 3
    - service: notify.hass
      data_template:
       message: '{{ states[trigger.entity_id.split(".")[0]][ trigger.entity_id.split(".")[1]].name }}'

- id: location
  alias: 'Last Movement'
  initial_state: True
  trigger:
    #bob
    - platform: state
      entity_id: sensor.bob
      to: 'ON'
    #masa
    - platform: state
      entity_id: sensor.masa_pir
      to: 'ON'
    #entrance
    - platform: state
      entity_id: sensor.entrance
      to: 'Motion'
    #kitchen, WC, Living, Hallway, couch
    - platform: state
      entity_id: binary_sensor.motion_sensor_kitchen, binary_sensor.motion_sensor_wc, binary_sensor.motion_sensor_living, binary_sensor.motion_sensor_hallway, binary_sensor.couch, binary_sensor.door_lightroom, binary_sensor.door_darkroom
      to: 'on'
      for:
        seconds: 0.1
  action:
      - service: input_select.select_option
        data_template:
         entity_id: input_select.location
         option: >
           {% if trigger.entity_id == "sensor.bob" %} Bob
           {% elif trigger.entity_id == "sensor.masa_pir" %} Masa
           {% elif trigger.entity_id == "binary_sensor.couch" %} Couch
           {% elif trigger.entity_id == "sensor.entrance" %} Entrance
           {% elif trigger.entity_id == "binary_sensor.motion_sensor_kitchen" %} Kitchen
           {% elif trigger.entity_id == "binary_sensor.motion_sensor_wc" %} WC
           {% elif trigger.entity_id == "binary_sensor.motion_sensor_living" %} Living
           {% elif trigger.entity_id == "binary_sensor.motion_sensor_hallway" %} Hallway
           {% elif trigger.entity_id == "binary_sensor.door_lightroom" %} Lightroom
           {% elif trigger.entity_id == "binary_sensor.door_darkroom" %} Darkroom
           {% endif %}

- id: Lazy_ON
  alias: Lazy ON
  initial_state: True
  trigger:
    - platform: state
      entity_id: sensor.couch
      to: 'Detected'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.guest
        state: 'off'
      - condition: template
        value_template: "{% if states.input_boolean.r.state == 'off' or states.media_player.firetv.state == 'playing' %}true{% endif %}"
  action:
    - service: automation.turn_off
      entity_id: automation.dota_table_on, automation.kitchen_on, automation.hallway_on
    - service: light.turn_off
      entity_id: light.wc,light.kitchen,light.kitchen_strip,light.kitchen,light.masa,light.Hallway1,light.Hallway2,light.Hallway3
    - service: input_select.select_option
      data:
        entity_id: input_select.location
        option: Couch

- id: Lazy_OFF
  alias: Lazy OFF
  initial_state: True
  trigger:
    - platform: state
      entity_id: sensor.couch
      to: 'Clear'
    - platform: state
      entity_id: media_player.firetv
      from: 'playing'
  action:
    - service: automation.turn_on
      entity_id: automation.dota_table_on, automation.kitchen_on, automation.hallway_on

- id: WC_Auto_OFF
  alias: 'WC Auto OFF'
  initial_state: True
  trigger:
  - platform: state
    entity_id: binary_sensor.motion_sensor_kitchen
    to: 'on'
    for:
      seconds: 0.1
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.r
        state: 'off'
      - condition: state
        entity_id: input_boolean.guest
        state: 'off'
      - condition: state
        entity_id: light.WC
        state: 'on'
  action:
      service: light.turn_off
      entity_id: light.WC

- id: got_home
  alias: 'Arrived Home'
  initial_state: True
  trigger:
    platform: state
    entity_id: binary_sensor.door_entrance
    to: 'on'
    for:
      seconds: 0.1
  action:
    - service: automation.trigger
      entity_id: automation.hallway_on

- id: snoop
  alias: 'snooping'
  initial_state: True
  trigger:
    platform: state
    entity_id: binary_sensor.motion_sensor_bedroom
    to: 'on'
    for:
      seconds: 0.1
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.z
        state: 'off'
      - condition: state
        entity_id: input_boolean.r
        state: 'off'
      - condition: state
        entity_id: input_boolean.guest
        state: 'on'
  action:
    - service: notify.hass
      data:
        target:
          - !secret she_mail
          - !secret he_mail        
        message: "Someone is snooping around the bedroom"

- id: door
  alias: 'Door opened'
  initial_state: True
  trigger:
    platform: state
    entity_id: binary_sensor.door_entrance
    to: 'on'
    for:
      seconds: 0.1
  condition:
    - condition: state
      entity_id: device_tracker.z
      state: 'not_home'
  action:
    - service: notify.hass
      data:
        target:
          - !secret she_mail
          - !secret he_mail
        title: "{{now().strftime('%H:%M:%S')}}"
        message: "Door opened"

- id: Home_Alone
  alias:  'Home Alone'
  initial_state: True
  trigger:
  - platform: state
    entity_id: group.lights
    to: 'on'
    for:
      seconds: 10
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.guest
        state: 'off'
      - condition: state
        entity_id: input_boolean.r
        state: 'off'
      - condition: state
        entity_id: input_boolean.z
        state: 'on'
      - condition: state
        entity_id: sun.sun
        state: 'below_horizon'
      - condition: state
        entity_id: sensor.couch
        state: 'Detected'
  action:
    - service: light.turn_off
      entity_id: light.kitchen, light.kitchen_strip, light.masa, light.wc, light.hallway1, light.hallway2, light.hallway3

- id: Gateway_ON
  alias:  Gateway light ON
  initial_state: True
  trigger:
  - platform: state
    entity_id: binary_sensor.motion_sensor_hallway
    from: 'off'
    to: 'on'
    for:
      seconds: 0.1
  - platform: state
    entity_id: sensor.entrance
    to: 'Motion'
  condition:
    condition: numeric_state
    entity_id: sensor.illumination_gateway
    below: 300
  action:
    - service: scene.turn_on
      entity_id: scene.gateway

- id: Gateway_OFF
  alias:  Gateway light OFF
  initial_state: True
  trigger:
    platform: state
    entity_id: binary_sensor.motion_sensor_hallway
    to: 'off'
    for:
      minutes: 5
  action:
    - service: light.turn_off
      entity_id: light.gateway

- id: Kitchen_ON
  alias:  'Kitchen ON'
  initial_state: True
  trigger:
  - platform: state
    entity_id: binary_sensor.motion_sensor_kitchen
    to: 'on'
    # for:
      # seconds: 0.1
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{% if states.sensor.house.state != 'Away' or states.sensor.house.state != 'Vacation' %}true{% endif %}"
      - condition: numeric_state
        entity_id: sensor.illumination_kitchen
        below: 30
  action:
      - service: scene.turn_on
        data_template:
          entity_id: >
            {% if now().strftime('%H')|int >= 0 and now().strftime('%H')|int <= 9 %}
              scene.kitchen_morning
            {% else %}
              scene.kitchen_night
            {% endif %}

- id: Kitchen_OFF
  alias:  'Kitchen OFF'
  initial_state: True
  trigger:
  - platform: state
    entity_id: light.kitchen, light.kitchen_strip
    to: 'on'
    for:
       seconds: 30
  - platform: state
    entity_id: binary_sensor.motion_sensor_kitchen
    to: 'off'
    for:
       seconds: 30
  condition:
    condition:  state
    entity_id: binary_sensor.motion_sensor_kitchen
    state: 'off'
  action:
      service: light.turn_off
      entity_id: light.kitchen, light.kitchen_strip

- id: Dota_ON
  alias:  'Dota Table ON'
  initial_state: True
  trigger:
  - platform: state
    entity_id: sensor.masa_pir
    to: 'ON'
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{% if states.sensor.house.state != 'Away' or states.sensor.house.state != 'Vacation' %}true{% endif %}"
      - condition: state
        entity_id: light.masa
        state: 'off'
      - condition: numeric_state
        entity_id: sensor.illumination_kitchen
        below: 30
  action:
      service: light.turn_on
      entity_id: light.masa

- id: Dota_OFF
  alias:  'Dota Table OFF'
  initial_state: True
  trigger:
  - platform: state
    entity_id: sensor.masa_pir
    to: 'OFF'
    for:
      minutes: 5
  action:
      service: light.turn_off
      entity_id: light.masa

- id: Bob_ON
  alias:  'Bob ON'
  initial_state: True
  trigger:
  - platform: state
    entity_id: sensor.bob
    to: 'ON'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.mmode
        state: 'on'
      - condition: template
        value_template: "{% if states.sensor.house.state != 'Away' or states.sensor.house.state != 'Vacation' %}true{% endif %}"
      - condition: sun
        after: sunset
        after_offset: "-00:15:00"
  action:
      service: light.turn_on
      entity_id: light.bob

- id: Bob_OFF
  alias:  'Bob OFF'
  initial_state: True
  trigger:
    platform: state
    entity_id: sensor.bob
    to: 'OFF'
    for:
      minutes: 15
  action:
      service: light.turn_off
      entity_id: light.bob, light.spot
#, switch.projector

- id: Hallway_ON
  alias:  'Hallway ON'
  initial_state: True
  trigger:
  - platform: state     
    entity_id: sensor.entrance
    to: 'Motion'
  - platform: state     
    entity_id: binary_sensor.motion_sensor_hallway
    to: 'on'
    for:
      seconds: 0.1
  - platform: state
    entity_id: binary_sensor.door_bedroom, binary_sensor.door_lightroom, binary_sensor.door_darkroom
    to: 'on'
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{% if states.sensor.house.state != 'Away' and states.sensor.house.state != 'Vacation' %}true{% endif %}"
      - condition: numeric_state
        entity_id: sensor.illumination_hallway
        below: 45
  action:
    - service: scene.turn_on
      data_template:
        entity_id: >
          {% if now().strftime('%H')|int >= 0 and now().strftime('%H')|int <= 9 %}
            scene.hallway_morning
          {% else %}
            scene.hallway_night
          {% endif %}

- id: Hallway_OFF
  alias:  'Hallway OFF'
  initial_state: True
  trigger:
  - platform: state
    entity_id: sensor.entrance
    to: 'Still'
    for:
      seconds: 30
  - platform: state
    entity_id: binary_sensor.motion_sensor_hallway
    to: 'off'
    for:
      seconds: 10
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: light.Hallway1
        state: 'on'
      - condition: state
        entity_id: sensor.entrance
        state: 'Still'
        for:
          seconds: 30
  action:
      service: light.turn_off
      entity_id: light.Hallway1,light.Hallway2,light.Hallway3

- id: WC_ON
  alias: 'WC ON'
  initial_state: True
  trigger:
  - platform: state     
    entity_id: binary_sensor.motion_sensor_wc
    to: 'on'
    # for:
      # seconds: 0.1
  condition:
    condition: and
    conditions:
      - condition: numeric_state
        entity_id: sensor.illumination_wc
        below: 10
  action:
    - service: scene.turn_on
      data_template:
        entity_id: >
          {% if now().strftime('%H')|int >= 2 and now().strftime('%H')|int <= 9 %}
            scene.wc_morning
          {% else %}
            scene.wc_night
          {% endif %}

- id: WC_OFF
  alias:  'WC OFF'
  initial_state: True
  trigger:
  - platform: state
    entity_id: binary_sensor.motion_sensor_wc
    to: 'off'
    for:
      seconds: 10
  action:
      service: light.turn_off
      entity_id: light.WC

- id: Riki
  alias:  'Feed ze animal 8&14&18'
  initial_state: True
  trigger: 
  - platform: time
    hours: 08
    minutes: 0
    seconds: 0
  - platform: time
    hours: 14
    minutes: 0
    seconds: 0
  - platform: time
    hours: 18
    minutes: 0
    seconds: 0
  action:
      - service: switch.turn_on
        entity_id: switch.rikis_food
      - delay: '00:00:07'
      - service: switch.turn_on
        entity_id: switch.rikis_food

####Cube####
- id: cube_rotate
  alias: Cube rotate
  initial_state: True
  trigger:
    platform: event
    event_type: cube_action
    event_data:
      entity_id: binary_sensor.cube
      action_type: rotate
  action:
    - service: homeassistant.toggle
      entity_id: group.guster

- id: tap_twice
  alias: Cube tap
  initial_state: True
  trigger:
    platform: event
    event_type: cube_action
    event_data:
      entity_id: binary_sensor.cube
      action_type: tap_twice
  action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.mmode
    - service: light.turn_off
      entity_id: light.kitchen, light.kitchen_strip, light.masa, light.bob

- id: flip90
  alias: Cube flip90
  initial_state: True
  trigger:
    platform: event
    event_type: cube_action
    event_data:
      entity_id: binary_sensor.cube
      action_type: flip90
  action:
    - service: light.toggle
      entity_id: light.kitchen,light.kitchen_strip

- id: flip180
  alias: Cube flip180
  initial_state: True
  trigger:
    platform: event
    event_type: cube_action
    event_data:
      entity_id: binary_sensor.cube
      action_type: flip180
  action:
    - service: light.toggle
      entity_id: light.masa 

- id: free_fall
  alias: Cube toggle
  initial_state: True
  trigger:
    platform: event
    event_type: cube_action
    event_data:
      entity_id: binary_sensor.cube
      action_type: free_fall
  action:
    - service: automation.toggle
      entity_id: automation.cube_rotate, automation.cube_flip90, automation.cube_flip180, automation.cube_tap, automation.cube_shake
    - service: light.toggle
      entity_id: light.bob
    - delay: '00:00:01'
    - service: light.toggle
      entity_id: light.bob

- id: shake_air
  alias: Cube shake
  initial_state: True
  trigger:
    platform: event
    event_type: cube_action
    event_data:
      entity_id: binary_sensor.cube
      action_type: shake_air
  action:
    - service: light.toggle  
      entity_id: light.spot

- id: shake_air_bob
  alias: Cube shake bob 
  initial_state: True
  trigger:
    platform: event
    event_type: cube_action
    event_data:
      entity_id: binary_sensor.cube
      action_type: shake_air
  action:
    - service: light.turn_off  
      entity_id: light.bob
    - service: input_boolean.turn_off
      entity_id: input_boolean.mmode

- id: move
  alias: Cube move
  initial_state: False
  hide_entity: True
  trigger:
    platform: event
    event_type: cube_action
    event_data:
      entity_id: binary_sensor.cube
      action_type: move
  action:
    - service: mqtt.publish
      data:
        topic: say/Z
        payload: "Garage door triggered"
        qos: 0
    - service: notify.hass
      data:
        message: "Hauarde"

- id: alert
  alias: 'Cube Alert'
  initial_state: False
  hide_entity: True
  trigger:
    platform: event
    event_type: cube_action
    event_data:
      entity_id: binary_sensor.cube
      action_type: alert
  action:
    - service: notify.hass        
      data_template:
        title: test
        message: >
                  Today is {{ now().strftime( '%a %d-%B') }}{{ "\n" }}
                  {{ "\n" }}
                  Outside feels like {{states('sensor.dark_sky_apparent_temperature') | round}}°, high is {{states('sensor.dark_sky_daytime_high_apparent_temperature')| round}}° with a low of {{states('sensor.dark_sky_overnight_low_apparent_temperature') | round}}°, {{states('sensor.dark_sky_template')|lower}} skies.{{ "\n" }}
                  Tonight's forecast is  {{states('sensor.dark_sky_hourly_summary')[:-1]|lower}}{{ "\n" }}

- id: swing
  alias: 'Cube Swing'
  initial_state: True
  trigger:
    platform: event
    event_type: cube_action
    event_data:
      entity_id: binary_sensor.cube
      action_type: swing
  action:
    - service: notify.hass
      data:
        title: Swing
        message: Cube swing

####Monitor devices####
- id: new_device
  alias: 'Notify for new devices'
  initial_state: True
  trigger:
    platform: event
    event_type: device_tracker_new_device
  action:
    - service: notify.hass
      data_template:
        message: >
         New entity ID {{ trigger.event.data.entity_id }} and hostname {{ trigger.event.data.host_name }}
    - service: shell_command.echo_groups
      data_template: 
        arg: "{{ trigger.event.data.entity_id }}"
    - service: group.reload

- id: 2c0e3de5e904
  hide_entity: True
  alias: 'Unknown MACs'
  initial_state: true
  trigger:
    - platform: state
      entity_id: !secret unknown_mac
  action:
    - service: notify.hass
      data_template:
        message: "One of the tracked devices has connected {{ trigger.entity_id }} and hostname {{ trigger.host_name }}"

- id: 'Sunset'
  alias: 'Sunset'
  initial_state: True
  trigger:
    platform: sun
    event: sunset
    offset: '-00:35:00'
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.mmode

