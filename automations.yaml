- alias: cron
  id: 'cron'
  initial_state: true
  trigger:
   - platform: time_pattern
     minutes: /60
  condition:
    - condition: state
      entity_id: switch.projector
      state: 'off'
    - condition: state
      entity_id: device_tracker.htpc_2
      state: 'home'
  action:
    - service: mqtt.publish
      data:
        topic: /home/laptop
        payload: 'standby'
        
- alias: "Input Geta changed"
  id: "Input Geta changed"
  initial_state: true
  trigger:
    - platform: state
      entity_id: input_datetime.geta
  condition:
    - condition: template
      value_template: '{{ states.input_datetime.geta.state != "00:00:00" }}'
   # - condition: template
    #  value_template: '{{ states.sensor.w_machine.state | int < 10 }}'
  action:
    - service: automation.turn_on
      entity_id: automation.autogeta
    - service: switch.turn_off
      entity_id: switch.w_machine
    - service: notify.hass
      data_template:
        title: 'Geta remembers:  {{states.input_datetime.geta.state}}'

- alias: "AutoGeta"
  id: "AutoGeta"
  initial_state: true
  trigger:
    - platform: template
      value_template: "{{ states('sensor.time') == (state_attr('input_datetime.geta', 'timestamp') | int | timestamp_custom('%H:%M', False)) }}"
  condition:
    - condition: template
      value_template: '{{ states.input_datetime.geta.state != "00:00:00" }}'
  action:
    - service: switch.turn_on
      entity_id: switch.w_machine
    - service: notify.hass
      data_template:
        message: 'Geta: {{ trigger.to_state.name }}'
        title: 'Geta on the job'
    - service: automation.turn_off
      entity_id: automation.autogeta
    - service: input_datetime.set_datetime
      entity_id: input_datetime.geta
      data: 
        time: '00:00:00'

- alias: "alert geta"
  id: "alert geta"
  initial_state: true
  trigger:
    - platform: state
      entity_id: sensor.geta
      from: 'On'
      to: 'Idle'
      for: '00:05:00'
    - platform: state
      entity_id: sensor.geta
      from: 'On'
      to: 'Idle'
      for: '00:20:00'
  action:
    # - service: tts.google_say
    #   entity_id: media_player.audio
    #   data:
    #      message: 'Hey, the washing machine has finished and is ready to be emptied'
    - service: media_player.volume_set
      data:
        entity_id: media_player.living_room_speaker
        volume_level: 0.5
    - service: media_player.play_media
      data:
        entity_id: media_player.living_room_speaker
        media_content_id: !secret geta_wav
        media_content_type: music
    - delay: '00:00:07'
    - service: media_player.volume_set
      data:
        entity_id: media_player.living_room_speaker
        volume_level: 0.2

- alias: "lambo"
  id: 'lambo'
  initial_state: true
  trigger: 
    - platform: state
      entity_id: sensor.wallet, sensor.mk_wallet
  condition: 
    - condition: template
      value_template: "{{ states.sensor.wallet.state != 'unavailable' or 
        states.sensor.wallet.state  != 'unavailable' }}"
  action: 
    - service: notify.hass
      data_template:
        title: 'You got paid {{ trigger.to_state.name }}'
        message: "{{ (trigger.to_state.state | int) - (trigger.from_state.state  | int) }} Storj"

- alias: "pause roku"
  id: "pause roku"
  initial_state: true
  trigger:
    - platform: mqtt
      topic: tele/IrReceiver/RESULT
  condition: 
    - condition: template
      value_template: "{{ trigger.payload_json['IrReceived']['Data'] == '0x10054' or 
        trigger.payload_json['IrReceived']['Data'] == '0x50' or 
        trigger.payload_json['IrReceived']['Data'] == '0x100BF' or 
        trigger.payload_json['IrReceived']['Data'] == '0xBF' }}"
    - condition: state
      entity_id: binary_sensor.tv
      state: 'on'
  action:
    - service: automation.turn_off
      entity_id: automation.remote_roku
    - delay: 00:01:00
    - service: automation.turn_on
      entity_id: automation.remote_roku

- alias: "tv on lights off"
  id: "tv on lights off"
  trigger:
    - platform: mqtt
      topic: tele/IrReceiver/RESULT
  condition: 
    - condition: template
      value_template: "{{ states.binary_sensor.tv.state == 'off' and (trigger.payload_json['IrReceived']['Data'] == '0x1000C' or trigger.payload_json['IrReceived']['Data'] == '0xC') }}"
    - condition: template
      value_template: "{{ states.sensor.bed_occupancy.state != 'off'}}"
    - condition: state
      entity_id: light.bedroom
      state: 'on'
  action:
    - service: light.turn_off
      entity_id: light.bedroom

- alias: remote_roku
  id: remote_roku
  initial_state: true
  trigger:
    - platform: mqtt
      topic: tele/IrReceiver/RESULT
  action:
    - service: remote.send_command
      data_template:
        entity_id: remote.roku
        command: >
           {% if trigger.payload_json['IrReceived']['Data'] == '0x58' %} up
           {% elif trigger.payload_json['IrReceived']['Data'] == '0x10058' %} up
           {% elif trigger.payload_json['IrReceived']['Data'] == '0x59' %} down
           {% elif trigger.payload_json['IrReceived']['Data'] == '0x10059' %} down
           {% elif trigger.payload_json['IrReceived']['Data'] == '0x5B' %} right
           {% elif trigger.payload_json['IrReceived']['Data'] == '0x1005B' %} right
           {% elif trigger.payload_json['IrReceived']['Data'] == '0x5A' %} left
           {% elif trigger.payload_json['IrReceived']['Data'] == '0x1005A' %} left
           {% elif trigger.payload_json['IrReceived']['Data'] == '0x5C' %} select
           {% elif trigger.payload_json['IrReceived']['Data'] == '0x1005C' %} select
           {% elif trigger.payload_json['IrReceived']['Data'] == '0xA' %} back
           {% elif trigger.payload_json['IrReceived']['Data'] == '0x1000A' %} back
           {% elif trigger.payload_json['IrReceived']['Data'] == '0xC' %} home
           {% elif trigger.payload_json['IrReceived']['Data'] == '0x1000C' %} home
           {% endif %}
  
- alias: Container goes offline
  id: Container goes offline
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.mk
      from: 'on'
      to: 'off'
      for:
        minutes: 5
    - platform: state
      entity_id: switch.couchpotato, 
                 switch.cron, 
                 switch.grafana, 
                 switch.hass, 
                 switch.influxdb, 
                 switch.letsencrypt, 
                 switch.mariadb, 
                 switch.mqtt, 
                 switch.nextcloud, 
                 switch.nginx, 
                 switch.ombi, 
                 switch.openvpn, 
                 switch.plex, 
                 switch.proxy, 
                 switch.redis, 
                 switch.splunk, 
                 switch.sickrage, 
                 switch.smokeping, 
                 switch.storagenode,
                 switch.tautulli, 
                 switch.telegraf, 
                 switch.transmission, 
                 switch.unifi, 
                 switch.z2m
      to: 'off'
      for:
        minutes: 5
  condition:
    condition: and
    conditions:
      # Only send this once per hour
      - condition: template
        value_template: >
          {% if state_attr('automation.container_goes_offline', 'last_triggered') is not none %}
            {% if as_timestamp(now()) | int   -  as_timestamp(states.automation.container_goes_offline.attributes.last_triggered) | int > 3600 %} true {% else %} false
            {% endif %}
          {% else %}
          false
          {% endif %}
  action:
    - service: notify.hass
      data_template:
        message: '{{ trigger.to_state.name }} stopped running 5 min ago.'
        title: Offline Alert
    - service: persistent_notification.create
      data_template:
        notification_id: offline_container
        title: Offline
        message: >
          {{ trigger.to_state.name }} is off-line

- alias: 'fail_over'
  id: 'fail_over'
  initial_state: true
  trigger:
    - platform: state
      entity_id: switch.fail_over
  action:
    - service: notify.hass
      data_template:
        title: "Warning Fail-Over"
        message: "Status: {{states.switch.fail_over.state}}"
    - service: notify.push
      data_template:
        title: "Warning Fail-Over"
        message: "Status: {{states.switch.fail_over.state}}"

- alias: 'app_name'
  id: 'app_name'
  initial_state: true
  trigger:
    - platform: template
      value_template: '{{ states.media_player.roku.attributes.app_name == "Pornhub" }}'
  action:
    - service: notify.hass
      data_template:
        title: "Gucci Gang"
        message: "Finger bang"

- alias: 'near shop'
  id: 'near shop'
  initial_state: false
  trigger:
    - platform: state
      entity_id: device_tracker.z_phone
      to: 'VK'
      for:
        seconds: 30
    - platform: state
      entity_id: device_tracker.z_phone
      to: 'BK'
  condition:
    - condition: state
      entity_id: device_tracker.z
      state: 'not_home'
  action:
    - service: notify.hass
      data_template:
        title: "{{trigger.to_state.state}}"
        message: "facem ceva cumparaturi?"

- alias: 'TV off'
  id: 'TV off'
  initial_state: true
  trigger:
    - platform: state
      entity_id: sensor.bed_occupancy
      to: 'off'
      for:
        seconds: 120
  condition:
    - condition: state
      entity_id: binary_sensor.motion_bedroom
      state: 'off'
    - condition: state
      entity_id: light.bedroom
      state: 'on'
    - condition: state
      entity_id: binary_sensor.tv
      state: 'on' 
  action:
    - service: light.turn_off
      entity_id: light.bedroom
    - service: remote.send_command
      data:
        entity_id: remote.roku
        command:
          - power

- alias: 'TV on'
  id: 'TV on'
  initial_state: true
  trigger:
    - platform: state
      entity_id: sensor.bed_occupancy
      to: 'double'
      for:
        seconds: 30
    - platform: state
      entity_id: sensor.bed_occupancy
      to: 'on'
      for:
        seconds: 30
  condition:
    - condition: state
      entity_id: light.bedroom
      state: 'on'
    - condition: state
      entity_id: binary_sensor.tv
      state: 'off'
    - condition: time
      after: '09:00:00'
      before: '07:00:00'
  action:
    - service: light.turn_off
      entity_id: light.bedroom
    - service: remote.send_command
      data:
        entity_id: remote.roku
        #if off
        command:
          - power

- alias: 'night sound'
  id: 'night sound'
  initial_state: true
  trigger:
    - platform: state
      entity_id: media_player.audio
      to: 'playing'
  condition:
    - condition: state
      entity_id: input_boolean.night
      state: 'on'
  action:
    - service: media_player.volume_set
      data:
        entity_id: media_player.audio
        volume_level: 0.1

- alias: 'Pause Roku remote'
  id: 'Pause Roku remote'
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.tv
      to: 'off'
   #   for: '00:01:00'
  condition:
    - condition: template
      value_template: '{{ states.media_player.roku.state != "home" or states.media_player.plex_roku.state == "playing" or states.media_player.roku.attributes.app_name == "Netflix" }}'
  action:
    - service: remote.send_command
      data:
        entity_id: remote.roku
        command:
          - play
         # - power
    - delay: '00:00:22'
    - service: remote.send_command
      data:
        entity_id: remote.roku
        command:
          - power

- alias: 'Fridge door'
  id: 'Fridge door'
  initial_state: true
  trigger:
    - platform: numeric_state
      entity_id: sensor.fridge
      above: 50
      for:
        minutes: 90
  action:
    - service: notify.hass
      data:
        message:  "check the fridge door"

- alias: 'bush'
  initial_state: false
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_bedroom, binary_sensor.door_darkroom, binary_sensor.motion_hallway
      to: 'on'
  action:
    - service: light.toggle
      entity_id: light.spot
    - delay: '00:00:01'
    - service: light.toggle
      entity_id: light.spot

- alias: 'Public Holidays'
  id: 'Public Holidays'
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.workday_sensor
      to: 'off'
  condition:
    - condition: time
      weekday:
        - mon
        - tue
        - wed
        - thu
        - fri
  action:
    - service: mqtt.publish
      data:
        topic: home/rosu
        payload: 'dismiss'

- alias: 'r sleep on'
  id: 'r sleep on'
  initial_state: true
  trigger:
    - platform: state
      entity_id: sensor.bed_occupancy
      to: 'on'
      for: '00:03:00'
    - platform: state
      entity_id: sensor.bed_occupancy
      to: 'on'
      for: '00:15:00'
    - platform: template
      value_template: '{{ states.media_player.roku.state == "playing" and states.switch.projector.state == "on"}}'
  condition:
    - condition: state
      entity_id: input_boolean.r
      state: 'on'
    - condition: state
      entity_id: device_tracker.rdell
      state: 'not_home'
    - condition: state
      entity_id: input_boolean.r_sleep
      state: 'off'
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.r_sleep, input_boolean.night

- alias: 'r sleep off'
  id: 'r sleep off'
  initial_state: true
  trigger:
    - platform: state
      entity_id: sensor.bed_occupancy
      to: 'off'
      for: '00:10:00'
    - platform: template
      value_template: '{{ states.sensor.bed_occupancy.state == "off" and states.switch.coffee_machine == "on" }}'
    - platform: state
      entity_id: sensor.bed_occupancy
      from: 'double'
      to: 'on'
      for: '00:15:00'
    - platform: state
      entity_id: input_boolean.r
      to: 'off'
    - platform: state
      entity_id: device_tracker.rdell
      to: 'home'
  condition:
    - condition: template
      value_template: '{{ states.sensor.bed_occupancy.state != "double" or states.device_tracker.rdell.state == "home" }}'
    #   state: 'off'
    #- condition: state
    #  entity_id: input_boolean.r
    #  state: 'on'
    - condition: state
      entity_id: input_boolean.r_sleep
      state: 'on'
  action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.r_sleep
    - delay: '00:05:00'
    - service: input_boolean.turn_off
      entity_id: input_boolean.night

- alias: 'Door set unlock'
  id: 'Door set unlock'
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.door_entrance
      to: 'on'
  condition:
    - condition: state
      entity_id: sensor.door_lock
      state: 'Lock'
    - condition: template
      value_template: '{{ as_timestamp(now()) - as_timestamp(states.sensor.door_lock.last_changed) | int > 30 }}'
  action:
    - service: shell_command.door
      data:
        arg: "fake"
    - service: notify.hass
      data:
        title: "{{now().strftime('%H:%M:%S')}}"
        message:  "FUnlocking door for {{states.sensor.house.state}}"
    - service: automation.turn_off
      entity_id: automation.door_unlock
  
- alias: Zigbee joining
  id: Zigbee joining
  initial_state: true
  trigger:
    - platform: state
      entity_id: input_boolean.zigbee_permit_join
      to: 'on'
  action:
    - service: mqtt.publish
      data:
        topic: zigbee2mqtt/bridge/config/permit_join
        payload: 'true'
    - delay: '00:15:00'
    - service: input_boolean.turn_off
      entity_id: input_boolean.zigbee_permit_join
    - service: mqtt.publish
      data:
        topic: zigbee2mqtt/bridge/config/permit_join
        payload: 'false'

- alias: 'Telegram friendly'
  id: 'Telegram friendly'
  initial_state: true
  trigger:
    - platform: event
      event_type: telegram_command
      event_data:
        command: '/add'
  condition:
    - condition: template
      value_template: '{{ trigger.event.data.args[0] != "" }}'
  action:
    - service: shell_command.friendly
      data_template:
        key: !secret key
        arg: '{{ trigger.event.data.args[0] }}'
    - service: telegram_bot.send_message
      data_template:
        target: '{{ trigger.event.data.user_id }}'
        disable_notification: true
        message: '{{ trigger.event.data.args[0] }}'
  
- alias: 'Telegram bot'
  id: 'Telegram bot'
  initial_state: true
  trigger:
    - platform: event
      event_type: telegram_command
      event_data:
        command: '/unlock'
    - platform: event
      event_type: telegram_command
      event_data:
        command: '/lock'
    - platform: event
      event_type: telegram_command
      event_data:
        command: '/reload'
  action:
    - service_template: >
        {% if trigger.event.data.command == "/lock" %}script.door_lock
        {% elif trigger.event.data.command == "/unlock" %}script.door_unlock
        {% elif trigger.event.data.command == "/reload" %}automation.reload
        {% else %}script.nothing{% endif %}
    - service: telegram_bot.send_message
      data_template:
        target: '{{ trigger.event.data.user_id }}'
        disable_notification: true
        message: >
         {% if trigger.event.data.command == "/unlock" %}unlocked
         {% elif trigger.event.data.command == "/lock" %}locked
         {% elif trigger.event.data.command == "/reload" %}reloaded{% endif %}

- alias: 'Night Mode'
  id: 'Night Mode'
  initial_state: true
  trigger:
    - platform: state
      entity_id: input_datetime.morning, input_datetime.night
  action:
    - service_template: >
       {% if states.input_datetime.morning.attributes.timestamp >= as_timestamp(now()) <= states.input_datetime.night.attributes.timestamp %}
        input_boolean.turn_on
       {% else %}
        input_boolean.turn_off
       {% endif %}
      entity_id: input_boolean.night

- alias: 'Wakeup lights'
  id: 'Wakeup lights'
  initial_state: true
  trigger:
    - platform: state
      entity_id: input_boolean.sleep
      to: 'off'
  condition:
    - condition: or
      conditions:
        - condition: state
          entity_id: light.hallway
          state: 'on'
        - condition: state
          entity_id: light.kitchen
          state: 'on'
  action:
    - service: light.turn_on
      data_template:
        brightness: 10
        entity_id: >
          {%- for x in states.light if x.state == 'on' and (x.entity_id != 'light.spot' and x.entity_id != 'light.table' and x.entity_id != 'light.bathroom' and x.entity_id != 'light.hallway' and x.entity_id != 'light.darkroom') -%} 
          {{- "," if not loop.first-}}{{ x.entity_id }}{{-endif-}}
          {%- endfor -%}

- alias: 'Good night lights'
  id: 'Good night lights'
  initial_state: true
  trigger:
    - platform: state
      entity_id: input_boolean.night
      to: 'off'
  condition:
    - condition: or
      conditions:
        - condition: state
          entity_id: light.hallway
          state: 'on'
        - condition: state
          entity_id: light.kitchen
          state: 'on'
  action:
    - service: light.turn_on
      data_template:
        brightness: 100
        entity_id: >
          {%- for x in states.light if x.state == 'on' and (x.entity_id != 'light.spot' and x.entity_id != 'light.table' and x.entity_id != 'light.bathroom' and x.entity_id != 'light.hallway' and x.entity_id != 'light.darkroom')-%} 
          {{- "," if not loop.first-}}{{ x.entity_id }}{{-endif-}}
          {%- endfor -%}
# - id: in_bed
#   alias: 'In bed'
#   id: aaaaa
#  initial_state: true
#   trigger:
#     - platform: numeric_state
#       entity_id: sensor.bed
#       above: 0
#       for:
#         seconds: 2
#   condition:
#     - condition: state
#       entity_id: input_boolean.bedroom
#       state: 'off'
#   action:
#     - service: input_boolean.turn_on
#       entity_id: input_boolean.bedroom

- alias: 'Couch Kitchen Bed'
  id: 'Couch Kitchen Bed'
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.couch
      to: 'off'
    - platform: template
      value_template: '{{ states.sensor.bed_occupancy.state != "off" }}'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.guest
        state: 'off'
      - condition: template
        value_template: '{{ states.sensor.bed_occupancy.state != "off" }}'
      - condition: state
        entity_id: binary_sensor.motion_mirror
        state: 'off'
      - condition: state
        entity_id: binary_sensor.motion_bar
        state: 'off'
      - condition: template
        value_template: '{{ states.light.kitchen.state == "on" and (as_timestamp(now()) - as_timestamp(states.light.kitchen.last_changed) | int < 60) }}'
  action:
    - service: light.turn_off
      data_template:
        entity_id: >
          {%- for x in states.light if x.state == 'on' and 
            x.entity_id != 'light.spot' and 
            (as_timestamp(now()) - as_timestamp(x.last_changed) | int < 60)  -%} 
          {{- "," if not loop.first-}}{{ x.entity_id }}{{-endif-}}
          {%- endfor -%}
    - service: light.turn_off
      entity_id: light.hallway

- alias: 'Vacuum'
  id: Vacuum
  initial_state: true
  trigger:
    - platform: state
      entity_id: input_boolean.away
      #input_boolean.vacation
      to: 'on'
  condition:
    - condition: state
      entity_id: vacuum.harry_potter
      state: 'docked'
    - condition: template
      value_template: '{{ (as_timestamp(now()) - as_timestamp(states.automation.vacuum.attributes.last_triggered | default(0)) | int > 180000) }}'
  action:
    - service: vacuum.start
      entity_id: vacuum.harry_potter
    - service: input_boolean.turn_on
      entity_id: input_boolea.dustbin

- alias: 'Vacuum empty dustbin'
  id: 'Vacuum empty dustbin'
  initial_state: true
  trigger:
    - platform: state
      entity_id: device_tracker.z, device_tracker.r
      to: 'home'
  condition:
    - condition: template
      value_template: "{{ not states.vacuum.harry_potter.attributes.cleaning_count % 2 }}"
    - condition: state
      entity_id: input_boolean.dustbin
      state: 'on'
    - condition: state
      entity_id: input_boolean.away
      state: 'on'
  action:
    - service: vacuum.send_command
      data:
        entity_id: vacuum.harry_potter
        command: app_goto_target
        params: [22400,30500]
    - service: input_boolean.turn_off
      entity_id: input_boolea.dustbin

- alias: 'Vacuum Lost'
  id: 'Vacuum Lost'
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.door_entrance
      to: 'off'
  condition:
    - condition: template
      value_template: '{{states.vacuum.harry_potter.state != "docked"}}'
    - condition: or
      conditions:
        - condition: template
          value_template: '{{ (trigger.entity_id == "binary_sensor.door_entrance" and states.input_boolean.away.state == "on") }}'
  action:
    - service: vacuum.locate
      entity_id: vacuum.harry_potter
    - delay: '00:00:20'
    - service: vacuum.locate
      entity_id: vacuum.harry_potter

- alias: 'Sleep'
  id: 'Sleep'
  initial_state: true
  trigger:
    - platform: webhook
      webhook_id: charging
    - platform: template
      value_template: '{{ (as_timestamp(now()) - as_timestamp(states.sensor.bed_occupancy.last_changed) | int > 7200) and states.sensor.bed_occupancy.state != "off" }}'
  condition:
    - condition: state
      entity_id: input_boolean.sleep
      state: 'off'
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.sleep, input_boolean.night
    - service: light.turn_off
      entity_id: light.bedroom

- alias: 'Good morning'
  id: 'Good morning'
  initial_state: true
  trigger:
    #- platform: webhook
    #  webhook_id: discharging
    - platform: webhook
      webhook_id: alarmdone
    - platform: template
      value_template: '{{ 
        ((as_timestamp(now()) - as_timestamp(states.sensor.bed_occupancy.last_changed) | int > 2 ) and states.sensor.bed_occupancy.state == "off") and 
        states.switch.coffee_machine.state == "on" and 
        states.binary_sensor.motion_bedroom.state == "on" and
        states.input_boolean.sleep.state == "on" }}'
  condition:
    - condition: state
      entity_id: input_boolean.sleep
      state: 'on'
#    - condition: template
#      value_template: '{{ as_timestamp(now()) - as_timestamp(states.input_boolean.sleep.last_changed) | int > 3600 }}'
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.night
    - service: switch.turn_on
      entity_id: switch.coffee_machine
    - wait_template: '{{ states.binary_sensor.motion_bedroom.state == "on" or states.binary_sensor.motion_wc.state == "on" }}'
      timeout: '00:05:00'
    - wait_template: '{{ (as_timestamp(now()) - as_timestamp(states.sensor.bed_occupancy.last_changed) | int > 5 ) and states.sensor.bed_occupancy.state != "double" }}'
      timeout: '01:00:00'
    - service: input_boolean.turn_off
      entity_id: input_boolean.sleep
    # - service: notify.hass
    #   data_template:
    #     message: 'good morning'
    # - service: input_datetime.set_datetime
    #   entity_id: input_datetime.night
    #   data_template:
    #     date: '{{ now().timestamp() | timestamp_custom("%Y-%m-%d", true) }}'
    # - service: input_datetime.set_datetime
    #   entity_id: input_datetime.morning
    #   data_template:
    #     time: '{{(as_timestamp(now()) + (15 * 60)) | timestamp_custom("%H:%M", true)}}'
    #     date: '{{ now().timestamp() | timestamp_custom("%Y-%m-%d", true) }}'
    - delay: '00:15:00'
    - service: input_boolean.turn_off
      entity_id: input_boolean.night

- alias: 'Auto mode'
  id: 'Auto mode'
  initial_state: true
  trigger:
    - platform: webhook
      webhook_id: walking
#      topic: "home/rosu/walking"
    - platform: template
      value_template: '{{ states.sensor.bed_occupancy.state == "off" and states.binary_sensor.motion_bedroom.state == "on"}}'
    - platform: state
      entity_id: binary_sensor.couch
      to: 'on'
      for:
        seconds: 2
    - platform: state
      entity_id: binary_sensor.door_lightroom, binary_sensor.door_darkroom, binary_sensor.door_bedroom, binary_sensor.door_entrance, binary_sensor.door_bathroom
    - platform: state
      entity_id: binary_sensor.motion_hallway
      to: 'on'
    - platform: state
      entity_id: binary_sensor.motion_living
      to: 'on'
  condition:
    - condition: state
      entity_id: input_boolean.manual
      state: 'on'
  action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.manual

- alias: 'Manual mode'
  id: 'Manual mode'
  initial_state: true
  trigger:
    - platform: state
      entity_id: sensor.bed_occupancy
      to: 'double'
      for:
        seconds: 30
    - platform: state
      entity_id: binary_sensor.couch
      to: 'off'
    - platform: state
      entity_id: input_boolean.sleep
      to: 'on'
    - platform: state
      entity_id: media_player.roku
      to: 'playing'
  condition:
    - condition: template
      value_template: '{{ states.media_player.roku.state != "home" or states.sensor.bed_occupancy.state != "off"  or states.input_boolean.r.state == "off" or states.input_boolean.z == "off" }}'
    - condition: template
      value_template: '{{ states.binary_sensor.couch.state == "off" or states.sensor.bed_occupancy.state == "double" }}'
    - condition: template
      value_template: '{{ states.device_tracker.rdell.state == "not_home" or states.sensor.bed_occupancy.state != "off" or states.input_boolean.z.state == "off" or states.input_boolean.r.state == "off" }}'
    - condition: template
      value_template: '{{ states.binary_sensor.motion_table.state == "off" and as_timestamp(now()) - as_timestamp(states.binary_sensor.motion_table.last_changed) | int > 30 }}'
    - condition: template
      value_template: '{{ (is_state("device_tracker.christina", "home") and "05" in state_attr("device_tracker.christina", "ap_mac")) or states.input_boolean.guest.state == "off" }}'
    - condition: state
      entity_id: input_boolean.manual
      state: 'off'
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.manual
    #- service: light.turn_off
    #  entity_id: light.kitchen, light.table, light.bob
      # data_template:
      #   entity_id: >
      #     {%- for state in states.light if state.entity_id != 'light.spot' and state.entity_id != 'light.bedroom' and state.entity_id != 'light.bathroom'  and state.entity_id != 'light.darkroom'  and state.entity_id != 'light.lightroom' -%} 
      #     {{- "," if not loop.first-}}{{ state.entity_id }}{{-endif-}}
      #     {%- endfor -%}

- alias: 'welcome music'
  id: 'welcome music'
  initial_state: true
  trigger:
    - platform: state
      entity_id: input_boolean.z, input_boolean.r
      to: 'on'
    #- platform: state
    #  entity_id: input_boolean.away
    #  to: 'off'
  condition:
    - condition: state
      entity_id: media_player.audio
      state: 'off'
    #- condition: or
    #  conditions:
    #    - condition: template
    #      value_template: '{{ (trigger.entity_id == "binary_sensor.door_entrance" and states.input_boolean.away.state == "on") }}'
    #    - condition: template
    #      value_template: '{{ trigger.entity_id == "input_boolean.away" }}'
  action:
    - service: media_player.volume_set
      data:
        entity_id: media_player.audio
        volume_level: 0.1
    - service: input_boolean.turn_on
      entity_id: input_boolean.play
    - service: shell_command.song
    - service: script.cast
    - delay: '00:00:05'

- alias: 'Door opened'
  id: 'Door opened'
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.door_entrance
      to: 'on'
      for:
        seconds: 0.1
  condition:
    - condition: state
      entity_id: device_tracker.z
      state: 'not_home'
    - condition: template
      value_template: '{{ states.input_boolean.away.state == "on" or states.input_boolean.vacation.state == "on" }}'
  action:
    # - service: notify.hass
    #   data:
    #     title: '{{now().strftime("%H:%M:%S")}}'
    #     message: 'Door opened'
    - delay: '00:00:05'
    - service_template: >
        {% if states.input_boolean.guest.state == 'on' or states.device_tracker.z.state == 'home' or states.device_tracker.r.state == 'home' %} script.nothing
        {% else %} notify.hass
        {% endif %}
      data_template:
        message: "Door opened"
        title: '{{now().strftime("%H:%M:%S")}}'
        
- alias: 'shiny'
  id: 'shiny'
  initial_state: true
  trigger:
    - platform: numeric_state
      entity_id: sensor.temperature_shiny
      above: 40
  action:
    - service: notify.hass
      data_template:
        message: 'shiny temp: {{states.sensor.temperature_shiny.state}}'

- alias: 'on boot'
  id: 'on boot'
  initial_state: true
  trigger:
    - platform: homeassistant
      event: start
  action:
    - service: homeassistant.update_entity
      entity_id: sensor.battery

- alias: 'hammock'
  id: 'hammock'
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_living
      to: 'on'
      for:
        seconds: 30
  condition:
    - condition: state
      entity_id: binary_sensor.motion_bar
      state: 'off'
      for:
        seconds: 60
    - condition: or
      conditions:
        - condition: state
          entity_id: light.kitchen
          state: 'on'
        - condition: state
          entity_id: light.kitchen_strip
          state: 'on'
  action:
    - service: light.turn_off
      entity_id: light.kitchen, light.kitchen_strip, light.bar

- alias: 'Cast Stop'
  id: 'Cast Stop'
  initial_state: true
  trigger:
    - platform: state
      entity_id: media_player.audio
      to: 'off'
  condition:
    - condition: state
      entity_id: input_boolean.play
      state: 'on'
  action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.play
    
- alias: 'Plex Music'
  id: 'Plex Music'
  initial_state: true
  trigger:
    - platform: state
      entity_id: media_player.audio
      to: 'idle'
    - platform: state
      entity_id: media_player.audio
      from: 'unavailable'
    - platform: state
      entity_id: input_boolean.play
      to: 'on'
    - platform: state
      entity_id: input_text.url
  condition:
    - condition: state
      entity_id: input_boolean.away
      state: 'off'
    - condition: state
      entity_id: input_boolean.play
      state: 'on'
  action:
    - service: shell_command.song
    - service: script.cast
    - delay: '00:00:05'

- alias: 'Cast'
  id: Cast
  initial_state: true
  trigger:
    - platform: state
      entity_id: input_text.url
  condition:
    - condition: template
      value_template: '{{ state_attr("input_text.url", "friendly_name") == "URL" }}'
    - condition: template
      value_template: '{{ states("input_text.url") != "" }}'
  action:
    - service: script.cast
    - delay: '00:00:03'

- alias: 'Spotify ads'
  id: 'Spotify ads'
  initial_state: true
  trigger:
    - platform: template
      value_template: '{{ state_attr("media_player.audio", "media_title") == "Advertisement" }}'
    - platform: template
      value_template: '{{ state_attr("media_player.audio", "media_title") == "Vice Informaci" }}'
    - platform: template
      value_template: '{{ state_attr("media_player.audio", "media_title") == "Spotify" }}'
  condition:
    - condition: template
      value_template: '{{ state_attr("media_player.audio", "is_volume_muted") == false }}'
  action:
    - service: media_player.volume_mute
      data:
        entity_id: media_player.audio
        is_volume_muted: 'yes'
    - wait_template:  '{{state_attr("media_player.audio", "media_title") != "Advertisement" }}'
      timeout: '00:03:00'
      continue_on_timeout: true
    - wait_template: '{{ state_attr("media_player.audio", "media_title") != "Vice Informaci" }}'
      timeout: '00:03:00'
      continue_on_timeout: true
    - wait_template: '{{ state_attr("media_player.audio", "media_title") != "Spotify" }}'
      timeout: '00:03:00'
      continue_on_timeout: true
    - service: media_player.volume_mute
      data:
        entity_id: media_player.audio
        is_volume_muted: 'no'

- alias: 'Projector off'
  id: 'Projector off'
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_spot
      to: 'off'
      for:
        minutes: 20
  condition:
    - condition: template
      value_template: '{{ states.sensor.t_power.state|int > 200 }}'
    - condition: state
      entity_id: binary_sensor.motion_living
      state: 'off'
    - condition: template
      # value_template: '{{ as_timestamp(now()) - as_timestamp(states.binary_sensor.motion_living.last_changed) | int > 1200 }}'
      value_template: '{{ (as_timestamp(now()) - (20 * 60)) >= as_timestamp(states.binary_sensor.motion_living.last_changed) }}'
  action:
    - service: mqtt.publish
      data:
        topic: /home/laptop
        payload: 'standby'
    - service: switch.turn_off
      entity_id: switch.projector_ir
    - delay: "00:00:03"
    - wait_template: >
        {% if as_timestamp(now()) - as_timestamp(states.binary_sensor.motion_spot.last_changed) | int > 20 %} True {% endif %}
      timeout: '00:00:10'
      continue_on_timeout: false
    - service_template: >
        {% if as_timestamp(now()) - as_timestamp(states.binary_sensor.motion_spot.last_changed) | int < 20 %} switch.turn_on
        {% else %}switch.turn_off
        {% endif %}
      entity_id: switch.projector_ir

- alias: 'Got brighter'
  id: 'Got brighter'
  initial_state: true
  trigger:
    - platform: template
      value_template: "{{ states.sensor.illumination_living.state | int > 36 }}"
      #state_attr('binary_sensor.motion_living', 'illuminance') | int > 36 }}"
  condition:
    - condition: state
      entity_id: light.table
      state: 'on'
  action:
    - service: light.turn_off
      entity_id: light.table

- alias: 'Lightroom Light'
  id: 'Lightroom Light'
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.door_lightroom
  # condition:
  #   - condition: state
  #     entity_id: input_boolean.guest
  #     state: 'off'
  action:
    - service_template: >
        {% if trigger.to_state.state == 'on' and states.sensor.illumination_living.state |int <= 50 %} light.turn_on
        {% else %} light.turn_off{% endif %}
      entity_id: light.lightroom
    - delay: '00:00:02'
    - service_template: >
        {% if trigger.to_state.state == 'on' and states.sensor.illumination_living.state |int <= 50 %} light.turn_on
        {% else %} light.turn_off{% endif %}
      entity_id: light.lightroom

- alias: 'Darkroom Light'
  id: 'Darkroom Light'
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.door_darkroom
  condition:
    - condition: state
      entity_id: input_boolean.guest
      state: 'off'
  action:
    - wait_template: >
        {% if trigger.to_state.state == 'on' or (now().hour >= 0 and now().hour <= 21) %} True {% endif %}
      timeout: '00:00:10'
      continue_on_timeout: true
    - service_template: >
        {% if trigger.to_state.state == 'on' %} light.turn_on
        {% else %}light.turn_off
        {% endif %}
      entity_id: light.darkroom

- alias: 'Bedroom doors'
  id: 'Bedroom doors'
  initial_state: false
  trigger:
    - platform: state
      entity_id: binary_sensor.door_lightroom
      to: 'on'
      for:
        seconds: 300
    - platform: state
      entity_id: binary_sensor.door_lightroom
      to: 'on'
      for:
        seconds: 600
  condition:
    #- condition: numeric_state
     # entity_id: sensor.socket_lightroom
     # below: 1
    - condition: state
      entity_id: input_boolean.night
      state: 'off'
    - condition: template
      value_template: '{{as_timestamp(now()) - as_timestamp(states.binary_sensor.motion_mirror.last_changed) | int > 120 and states.binary_sensor.motion_mirror.state == "off" }}'
    # - condition: numeric_state
    #   entity_id: input_boolean.night
    #   state: 'off'
    # - condition: template
    #   value_template: '{{ as_timestamp(now()) >= states.input_datetime.morning.attributes.timestamp }}'
  action:
    - service: media_player.volume_set
      data:
        entity_id: media_player.living_room_speaker
        volume_level: 0.8
    - service: media_player.play_media
      data:
        entity_id: media_player.living_room_speaker
        media_content_id: !secret door_wav
        media_content_type: music
    - delay: '00:00:07'
    - service: media_player.volume_set
      data:
        entity_id: media_player.living_room_speaker
        volume_level: 0.2

- alias: 'Bedroom doors closed'
  id: 'Bedroom doors closed'
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.door_lightroom, binary_sensor.door_darkroom
      to: 'off'
      for:
        seconds: 1
  condition:
    - condition: template
      value_template: '{{ as_timestamp(now()) - as_timestamp(states.automation.bedroom_doors.attributes.last_triggered) | int < 120 }}'
  action:
    - service: media_player.volume_set
      data:
        entity_id: media_player.living_room_speaker
        volume_level: 0.8
    - service: media_player.play_media
      data:
        entity_id: media_player.living_room_speaker
        media_content_id: !secret door_thanks
        media_content_type: music
    - delay: '00:00:05'
    - service: media_player.volume_set
      data:
        entity_id: media_player.living_room_speaker
        volume_level: 0.2

- alias: 'Movie'
  id: 'Movie'
  initial_state: true
  trigger:
    - platform: state
      entity_id: sensor.laptop
      to: 'movie'
    - platform: state
      entity_id: media_player.plex_htpc
      to: 'playing'
  condition:
    condition: and
    conditions:
      # - condition: template
      #   value_template: '{{ states("switch.htpc") != "unavailable" }}'
      # - condition: state
      #   entity_id: input_boolean.guest
      #   state: 'off'
      - condition: state
        entity_id: input_boolean.z
        state: 'on'
      # - condition: state
      #   entity_id: binary_sensor.couch
      #   state: 'off'
      - condition: state
        entity_id: media_player.audio
        state: 'playing'
  action:
    - service: homeassistant.turn_off
      entity_id: group.guster
    - service: homeassistant.turn_on
      entity_id: light.spot
    - service: media_player.media_play_pause
      entity_id: media_player.audio

- alias: 'movie time off'
  id: 'movie time off'
  initial_state: true
  trigger:
    - platform: state
      entity_id: sensor.laptop
      to: 'stuff'
    - platform: state
      entity_id: media_player.plex_htpc
      to: 'paused'
  condition:
    - condition: state
      entity_id: media_player.audio
      state: 'paused'
  action:
    - service: media_player.media_play_pause
      entity_id: media_player.audio

- alias: 'House mode us'
  id: 'House mode us'
  initial_state: true
  trigger:
    - platform: state
      entity_id: device_tracker.z
    - platform: state
      entity_id: device_tracker.r
    - platform: state
      entity_id: device_tracker.rdell
    - platform: state
      entity_id: device_tracker.z_phone
    - platform: state
      entity_id: device_tracker.r_phone
  condition:
    - condition: template
      value_template: '{{ as_timestamp(now()) - as_timestamp(states.binary_sensor.door_entrance.last_changed) | int < 1800 }}'
    - condition: template
      value_template: '{{ (trigger.to_state.state == "home" and (states.input_boolean.r.state == "off" or states.input_boolean.z.state == "off")) or (trigger.to_state.state == "not_home" and (states.input_boolean.r.state == "on" or states.input_boolean.z.state == "on")) }}'
  action:
    - service_template: >
        {% if trigger.to_state.state == 'home' %} homeassistant.turn_on
        {% elif (states.device_tracker.rdell.state == states.device_tracker.r.state ) or (trigger.entity_id == 'device_tracker.z' and trigger.to_state.state == 'not_home') %} input_boolean.turn_off
        {% else %} script.nothing
        {% endif %}
      data_template:
        entity_id: >
          {% if trigger.entity_id == 'device_tracker.z' or trigger.entity_id == 'device_tracker.z_phone' %} input_boolean.z
          {% elif trigger.entity_id == 'device_tracker.r' or trigger.entity_id == 'device_tracker.rdell' or trigger.entity_id == 'device_tracker.r_phone' %} input_boolean.r
          {% else %} script.nothing
          {% endif %}

- alias: 'House mode guest'
  id: 'House mode guest'
  initial_state: true
  trigger:
    - platform: state
      entity_id: group.guests
      to: 'not_home'
      for:
        seconds: 30
    - platform: state
      entity_id: group.guests
      to: 'home'
  action:
    - service_template: >
        {% if trigger.to_state.state == 'home' %} input_boolean.turn_on
        {% else %} input_boolean.turn_off
        {% endif %}
      entity_id: input_boolean.guest

- alias: 'House mode Away'
  id: 'House mode Away'
  initial_state: true
  trigger:
    - platform: state
      entity_id: input_boolean.z, input_boolean.r, input_boolean.guest
  condition:
    condition: or
    conditions:
      - condition: template
        value_template: '{{ 
          states.input_boolean.z.state == "off" and 
          states.input_boolean.r.state == "off" and 
          states.input_boolean.guest.state == "off" }}'
      - condition: template
        value_template: '{{ trigger.to_state.state == "on" }}'
  action:
    - service_template: >
        {% if trigger.to_state.state == 'off' %} input_boolean.turn_on
        {% else %} input_boolean.turn_off
        {% endif %}
      entity_id: input_boolean.away
    - service_template: >
        {% if trigger.to_state.state == 'off' %} script.house_mode_away
        {% else %} script.nothing
        {% endif %}

- alias: 'House mode Vacation'
  id: 'House mode Vacation'
  initial_state: true
  trigger:
    - platform: time
      at: '00:00:00'
    - platform: state
      entity_id: input_boolean.away
      to: 'on'
      for: '17:00:00'
    - platform: state
      entity_id: input_boolean.away
      to: 'off'
  action:
    - service_template: >
        {% if states.input_boolean.away.state == 'off' %} input_boolean.turn_off
        {% else %} input_boolean.turn_on
        {% endif %}
      entity_id: input_boolean.vacation

- alias: 'Notify House Mode'
  id: 'Notify House Mode'
  initial_state: true
  trigger:
    - platform: state
      entity_id: input_boolean.vacation, input_boolean.guest
      #,input_boolean.away
  action:
    - service: notify.hass
      data_template:
        title: "{{now().strftime('%H:%M:%S')}}"
        message: >
          {% if trigger.entity_id == 'input_boolean.vacation' %} Vacation Mode is now {{states.input_boolean.vacation.state}}
          {% elif trigger.entity_id == 'input_boolean.away' %} Away Mode is now {{states.input_boolean.away.state}}
          {% elif trigger.entity_id == 'input_boolean.guest' %} Guest Mode is now {{states.input_boolean.guest.state}}
          {% endif %}

- alias: 'Door Lock'
  id: 'Door Lock'
  initial_state: false
  trigger:
    - platform: state
      entity_id: sensor.house
      to: 'Away'
      for:
        minutes: 5
  action:
    - service: script.door_lock
    - service: input_boolean.turn_on
      entity_id: input_boolean.manual

- alias: 'Door Unlock'
  id: 'Door Unlock'
  initial_state: false
  trigger:
    - platform: state
      entity_id: input_boolean.away
      to: 'off'
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: '{{ as_timestamp(now()) - as_timestamp(states.binary_sensor.door_entrance.last_changed) | int > 300 }}'
      - condition: template
        value_template: '{{ states.input_boolean.z == "on" or states.input_boolean.r == "on" or states.input_boolean.guest == "on" }}'
      - condition: state
        entity_id: sensor.door_lock
        state: 'Lock'
  action:
    - service: script.door_unlock

- alias: 'Morning Briefing Z'
  id: 'Morning Briefing Z'
  initial_state: true
  trigger:
    - platform: state
      entity_id: input_boolean.sleep
      to: 'off'
  action:
    - service: notify.hass
      data_template:
        title: "Today is {{ now().strftime( '%A %d %B ')}}{{ '\n' }}Sleep: {{state_attr('sensor.sleep', 'value')}}"
        message: >
           Outside feels like {{states('sensor.dark_sky_apparent_temperature') | round}}°, {{states('sensor.dark_sky_daytime_high_apparent_temperature_0d')| round}}°/{{states('sensor.dark_sky_overnight_low_apparent_temperature_0d') | round}}° {{ "\n" }}Forecast is {{states('sensor.dark_sky_summary_0d')[:-1]|lower}}
           {{ "\n" }}Storj has increased by: {{states.sensor.storj_egress.state}}-{{states.sensor.mk_storj_egress.state}}Gb{{ "\n" }}{{states('sensor.zalendar')}}{{ "\n" }}
           {{ "\n" }}{{states.sensor.quote_of_the_day.state}}

- alias: 'from couch to kitchen'
  id: 'from couch to kitchen'
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_living
      to: 'on'
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ states.sensor.illumination_living.state  | int < 30}}"
      - condition: state
        entity_id: binary_sensor.couch
        state: 'on'
      - condition: state
        entity_id: light.kitchen
        state: 'off'
      - condition: template
        value_template: '{{ as_timestamp(now()) - as_timestamp(states.binary_sensor.motion_spot.last_changed) | int < 300 }}'
  action:
    - service: automation.trigger
      entity_id: automation.kitchen_on

- alias: 'Monkey'
  id: Monkey
  initial_state: true
  trigger:
    - platform: event
      event_type: xiaomi_aqara.click
      event_data:
        entity_id: binary_sensor.switch_monkey
        click_type: double
    - platform: event
      event_type: xiaomi_aqara.click
      event_data:
        entity_id: binary_sensor.switch_monkey
        click_type: single
  action:
    - service: input_boolean.turn_on
      data:
        entity_id: input_boolean.r
    - service: xiaomi_aqara.play_ringtone
      data:
        gw_mac: !secret xg_mac
        ringtone_id: 10002
        ringtone_vol: 50

- alias: 'Bedroom Button single'
  id: 'Bedroom Button single'
  initial_state: true
  trigger:
      platform: event
      event_type: xiaomi_aqara.click
      event_data:
        entity_id: binary_sensor.switch_bedroom
        click_type: single
  action:
    - service: automation.trigger
      data_template:
        entity_id: >
          {% if states.light.bedroom.state == 'on' %}automation.bedroom_off
          {% else %}automation.bedroom_on
          {% endif %}

- alias: 'Bedroom button double'
  id: 'Bedroom button double'
  initial_state: true
  trigger:
    - platform: event
      event_type: xiaomi_aqara.click
      event_data:
        entity_id: binary_sensor.switch_bedroom
        click_type: double
  action:
    - service: yeelight.set_mode
      data:
        entity_id: light.bedroom
        mode: normal
    - service: light.turn_on
      entity_id: light.bedroom
    - service: automation.turn_off
      entity_id: automation.bedroom_off, automation.bedroom_on
    - delay: '00:10:00'
    - wait_template: '{{ states.binary_sensor.motion_bedroom.state == "off" }}'
    - service: automation.turn_on
      entity_id: automation.bedroom_off, automation.bedroom_on

- alias: 'Location'
  id: 'Location'
  initial_state: true
  trigger:
    - platform: template
      value_template: '{{ states.sensor.bed_occupancy.state != "off" }}'
    - platform: state
      entity_id: sensor.entrance
      to: 'Motion'
    - platform: state
      entity_id: binary_sensor.motion_spot,
                 binary_sensor.motion_table,
                 binary_sensor.couch,
                 binary_sensor.motion_bedroom,
                 binary_sensor.motion_bar,
                 binary_sensor.motion_wc,
                 binary_sensor.motion_living,
                 binary_sensor.motion_hallway,
                 binary_sensor.motion_mirror,
                 binary_sensor.door_lightroom,
                 binary_sensor.door_darkroom,
                 binary_sensor.door_bedroom,
                 binary_sensor.door_bathroom
      to: 'on'
      for:
        seconds: 0.1
  action:
    - service: input_select.select_option
      data_template:
        entity_id: input_select.location
        # option: '{{trigger.to_state.attributes.friendly_name}}'
        option: >
           {% if trigger.entity_id == "binary_sensor.motion_spot" %} Spot
           {% elif trigger.entity_id == "binary_sensor.motion_table" %} Table
           {% elif trigger.entity_id == "binary_sensor.couch" %} Couch
           {% elif trigger.entity_id == "sensor.entrance" %} Entrance
           {% elif trigger.entity_id == "binary_sensor.motion_bedroom" %} Bedroom
           {% elif trigger.entity_id == "binary_sensor.motion_bar" %} Kitchen
           {% elif trigger.entity_id == "binary_sensor.motion_wc" %} WC
           {% elif trigger.entity_id == "binary_sensor.motion_living" %} Living
           {% elif trigger.entity_id == "binary_sensor.motion_hallway" %} Hallway
           {% elif trigger.entity_id == "binary_sensor.motion_mirror" %} Bathroom
           {% elif trigger.entity_id == "binary_sensor.door_lightroom" %} Lightroom
           {% elif trigger.entity_id == "binary_sensor.door_darkroom" %} Darkroom
           {% elif trigger.entity_id == "binary_sensor.door_bedroom" %} Bedroom
           {% elif trigger.entity_id == "binary_sensor.door_bathroom" %} Bathroom
           {% elif trigger.entity_id == "sensor.bed_occupancy" %} Bed
           {% endif %}

- alias: 'WC Auto OFF'
  id: 'WC Auto OFF'
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_bar
      to: 'on'
      for:
        seconds: 0.1
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: '{{ as_timestamp(now()) - as_timestamp(states.binary_sensor.door_entrance.last_changed) | int > 1800 }}'
      - condition: state
        entity_id: input_boolean.r
        state: 'off'
      - condition: state
        entity_id: input_boolean.guest
        state: 'off'
      - condition: state
        entity_id: light.WC
        state: 'on'
  action:
    service: light.turn_off
    entity_id: light.WC

- alias: 'snooping'
  id: 'snooping'
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_bedroom
      to: 'on'
      for:
        seconds: 0.1
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.z
        state: 'off'
      - condition: state
        entity_id: input_boolean.r
        state: 'off'
      - condition: state
        entity_id: input_boolean.guest
        state: 'on'
  action:
    - service: notify.hass
      data:
        message: 'Someone is snooping around the bedroom'

- alias: 'Away off'
  id: 'Away off'
  initial_state: true
  trigger:
    - platform: state
      entity_id: input_boolea.away
      to: 'off'
  action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.night

- alias: 'Gateway light ON'
  id: 'Gateway light ON'
  initial_state: false
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_hallway
      from: 'off'
      to: 'on'
      for:
        seconds: 0.1
    - platform: state
      entity_id: sensor.entrance
      to: 'Motion'
  condition:
    condition: numeric_state
    entity_id: sensor.illumination_gateway
    below: 300
  action:
    - service: scene.turn_on
      entity_id: scene.gateway

- alias: 'Gateway light OFF'
  id: 'Gateway light OFF'
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_hallway
      to: 'off'
      for:
        minutes: 5
    - platform: state
      entity_id: sensor.entrance
      to: 'Still'
      for:
        minutes: 5
  condition:
    condition: state
    entity_id: light.gateway
    state: 'on'
  action:
    - service: light.turn_off
      entity_id: light.gateway

- alias: 'Bedroom ON'
  id: 'Bedroom ON'
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_bedroom
      to: 'on'
      for:
        seconds: 0.1
    - platform: state
      entity_id: sensor.bed_occupancy
      to: 'off'
      for:
        seconds: 2
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: binary_sensor.motion_bedroom
        state: 'on'
      - condition: numeric_state
        entity_id: sensor.illumination_bedroom
        below: 100
      - condition: state
        entity_id: input_boolean.manual
        state: 'off'
      #- condition: state
      #  entity_id: input_boolean.sleep
      #  state: 'off'
      - condition: template
        value_template: '{{ states.media_player.roku.state != "playing" or states.binary_sensor.tv.state == "off" }}'
      - condition: state
        entity_id: sensor.bed_occupancy
        state: 'off'
      - condition: state
        entity_id: binary_sensor.tv
        state: 'off'
  action:
    - service: yeelight.set_mode
      data_template:
        entity_id: light.bedroom
        mode: >
         {% if states.input_boolean.night.state == 'on' or states.input_boolean.r_sleep.state == "on" or states.input_boolean.sleep.state == "on" %}
           moonlight
         {% else %}
           normal
         {% endif %}
    - service: scene.turn_on
      data_template:
        entity_id: >
         {% if states.input_boolean.night.state == 'on' or states.input_boolean.r_sleep.state == "on" or states.input_boolean.sleep.state == "on" %}
           scene.bedroom_night
         {% elif as_timestamp(now()) - as_timestamp(states.light.bedroom.last_changed) | int > 7200 %}
           scene.bedroom_night
         {% else %}
           scene.bedroom_day
         {% endif %}

- alias: 'Bedroom OFF'
  id: 'Bedroom OFF'
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_bedroom
      to: 'off'
      for: '00:02:00'
    - platform: state
      entity_id: media_player.roku
      to: 'playing'
    # - platform: template
    #   value_template: '{{ states.sensor.bed_occupancy.state != "off" }}'
    - platform: template
      value_template: '{{ states.media_player.roku.state != "standby"}}'
  condition:
    - condition: state
      entity_id: light.bedroom
      state: 'on'
    # - condition: template
    #   value_template: '{{ (as_timestamp(now()) - as_timestamp(states.binary_sensor.switch_bedroom.last_changed) | int > 900) or states.sensor.uptime.state|int < 15 }}
    - condition: template
      value_template: '{{ as_timestamp(now()) - as_timestamp(states.automation.bedroom_button_single.attributes.last_triggered) | int > 120 or states.sensor.uptime.state|int < 15 }}'
  action:
    - service: light.turn_off
      entity_id: light.bedroom

- alias: 'Kitchen ON'
  id: 'Kitchen ON'
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_living
      to: 'on'
      for:
        seconds: 0.1
    - platform: state
      entity_id: binary_sensor.motion_bar
      to: 'on'
      for:
        seconds: 0.1
  condition:
    - condition: state
      entity_id: input_boolean.manual
      state: 'off'
    - condition: template
      value_template: "{{ states.sensor.illumination_living.state | int < 20}}"
    #- condition: template
    #  value_template: "{{ state_attr('binary_sensor.motion_living', 'illuminance')  | int < 20}}"
    - condition: template
      value_template: '{{ states.light.kitchen.state == "off" or states.light.kitchen_strip.state == "off" or states.light.bar.state == "off" }}'
    - condition: template
      value_template: '{{ states.binary_sensor.motion_living.state == "on" or states.binary_sensor.motion_table.state == "on" or states.light.hallway.state == "on" or states.binary_sensor.motion_hallway.state == "on"  }}'
  action:
    - service: scene.turn_on
      data_template:
        entity_id: >
            {% if states.input_boolean.night.state == 'on' %}
              scene.kitchen_night
            {% else %}
              scene.kitchen_day
            {% endif %}

- alias: 'Kitchen OFF'
  id: 'Kitchen OFF'
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_bar
      to: 'off'
      for:
        minutes: 5
  condition:
    - condition: or
      conditions:
        - condition: state
          entity_id: light.kitchen
          state: 'on'
        - condition: state
          entity_id: light.kitchen_strip
          state: 'on'
        - condition: state
          entity_id: light.bar
          state: 'on'
  action:
    - service: light.turn_off
      data:
        entity_id: light.kitchen
        # transition: 20
    - service: light.turn_off
      data:
        entity_id: light.kitchen_strip, light.bar

- alias: 'Table ON'
  id: 'Table ON'
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_table
      to: 'on'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.manual
        state: 'off'
      - condition: state
        entity_id: light.table
        state: 'off'
      - condition: template
        value_template: "{{ states.sensor.illumination_living.state | int < 20}}"
    #  - condition: template
    #    value_template: "{{ state_attr('binary_sensor.motion_living', 'illuminance') | int < 37}}"
  action:
    - service: light.turn_on
      entity_id: light.table

- alias: 'Table OFF'
  id: 'Table OFF'
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_table
      to: 'off'
      for:
        minutes: 10
  condition:
    - condition: state
      entity_id: light.table
      state: 'on'
  action:
    - service: light.turn_off
      entity_id: light.table

- alias: 'Bob ON'
  id: 'Bob ON'
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_spot
      to: 'on'
  condition:
    condition: and
    conditions:
      # - condition: template
      #   value_template: '{{ states.media_player.video.state == null }}'
      # - condition: template
      #   value_template: '{{ states.sensor.laptop.state == "off" or states.device_tracker.htpc.state == "not_home"}}'
      - condition: state
        entity_id: input_boolean.manual
        state: 'off'
      - condition: state
        entity_id: switch.projector
        state: 'off'
      - condition: state
        entity_id: light.bob
        state: 'off'
      - condition: template
        value_template: '{{ states.sensor.house.state != "Away" or states.sensor.house.state != "Vacation" }}'
      - condition: sun
        after: sunset
  action:
    - service: light.turn_on
      entity_id: light.bob
      # data_template:
      #   transition: >
      #       {% if states.sun.sun.attributes.rising == 'false' %}40
      #       {% else %}3
      #       {% endif %}
      #   brightness: >
      #       {% if states.input_boolean.night.state == 'on' %}26
      #       {% else %}255
      #       {% endif %}

- alias: 'Bob sunset'
  id: 'Bob sunset'
  initial_state: true
  trigger:
    platform: sun
    event: sunset
    offset: "-00:35:00"
  condition:
    - condition: template
      value_template: '{{ 
        (states.binary_sensor.motion_living.state == "on" and 
        as_timestamp(now()) - as_timestamp(states.binary_sensor.motion_living.last_changed) | int < 700) or 
        (states.binary_sensor.motion_spot == "on" and
        as_timestamp(now()) - as_timestamp(states.binary_sensor.motion_spot.last_changed) | int < 700) }}'
    - condition: state
      entity_id: light.bob
      state: 'off'
    - condition: state
      entity_id: light.spot
      state: 'off'
  action:
    - service: light.turn_on
      data:
        entity_id: light.bob
        transition: 60
    - delay: '00:01:00'
    - service: automation.turn_on
      entity_id: automation.bob_on

- alias: 'Bob OFF'
  id: 'Bob OFF'
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_spot
      to: 'off'
      for:
        minutes: 15
    - platform: state
      entity_id: binary_sensor.motion_spot
      to: 'off'
      for:
        minutes: 30
  condition:
    - condition: template
      value_template: '{{ as_timestamp(now()) - as_timestamp(states.binary_sensor.motion_living.last_changed) | int > 700 }}'
    - condition: or
      conditions:
        - condition: state
          entity_id: light.bob
          state: 'on'
        - condition: state
          entity_id: light.spot
          state: 'on'
  action:
    - service: light.turn_off
      entity_id: light.bob, light.spot

- alias: 'Bob Auto on'
  id: 'Bob Auto on'
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_spot
      to: 'off'
      for:
        minutes: 20
  condition:
    condition: state
    entity_id: automation.bob_on
    state: 'off'
  action:
    - service: automation.turn_on
      entity_id: automation.bob_on

- alias: 'Hallway ON'
  id: 'Hallway ON'
  initial_state: true
  trigger:
    - platform: state
      entity_id: sensor.entrance
      to: 'Motion'
    - platform: state
      entity_id: binary_sensor.motion_hallway
      to: 'on'
      for:
        seconds: 0.1
    - platform: state
      entity_id: binary_sensor.door_entrance, binary_sensor.door_bedroom, binary_sensor.door_lightroom, binary_sensor.door_darkroom, binary_sensor.door_bathroom
      to: 'on'
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: '{{ states.input_boolean.manual.state == "off" or states.binary_sensor.motion_hallway.state == "on" }}'
      - condition: numeric_state
        entity_id: sensor.illumination_hallway
        below: 120
      - condition: template
        value_template: '{{ states.sensor.house.state != "Away" or states.sensor.house.state != "Vacation" }}'
  action:
    - service: homeassistant.turn_on
      data_template:
        entity_id: >
          {% if states.input_boolean.night.state == 'on' %}
            scene.hallway_night
          {% else %}
            scene.hallway_day
          {% endif %}

- alias: 'Hallway OFF'
  id: 'Hallway OFF'
  initial_state: true
  trigger:
    - platform: state
      entity_id: sensor.entrance
      to: 'Still'
      for:
        seconds: 30
    - platform: state
      entity_id: binary_sensor.motion_hallway
      to: 'off'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: binary_sensor.door_closet
        state: 'off'
      - condition: state
        entity_id: light.hallway
        state: 'on'
      - condition: state
        entity_id: binary_sensor.door_entrance
        state: 'off'
      - condition: state
        entity_id: binary_sensor.motion_hallway
        state: 'off'
      - condition: template
        value_template: '{{ states.sensor.entrance.state == "Still" and as_timestamp(now()) - as_timestamp(states.sensor.entrance.last_changed) | int > 30 }}'
  action:
    - service: light.turn_off
      entity_id: light.hallway

- alias: 'WC ON'
  id: 'WC ON'
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_wc
      to: 'on'
  condition:
    condition: and
    conditions:
      - condition: numeric_state
        entity_id: sensor.illumination_wc
        below: 20
  action:
    - service: scene.turn_on
      data_template:
        entity_id: >
          {% if states.input_boolean.night.state == 'on' %}scene.wc_night
          {% else %}scene.wc_day
          {% endif %}
    - delay: '00:00:01'
    - service: scene.turn_on
      data_template:
        entity_id: >
          {% if states.input_boolean.night.state == 'on' %}scene.wc_night
          {% else %}scene.wc_day
          {% endif %}

- alias: 'WC OFF'
  id: 'WC OFF'
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_wc
      to: 'off'
      for:
        seconds: 30
  condition:
    - condition: state
      entity_id: light.WC
      state: 'on'
  action:
    - service: light.turn_off
      entity_id: light.WC

- alias: 'Bathroom ON'
  id: 'Bathroom ON'
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_mirror
      to: 'on'
  condition:
    - condition: numeric_state
      entity_id: sensor.illumination_mirror
      below: 80
  action:
    - service: light.turn_on
      entity_id: light.bathroom

- alias: 'Bathroom OFF'
  id: 'Bathroom OFF'
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_mirror
      to: 'off'
      for:
        minutes: 5
    - platform: state
      entity_id: binary_sensor.door_bathroom
      to: 'on'
      for:
        seconds: 30
  condition:
    - condition: state
      entity_id: light.bathroom
      state: 'on'
    - condition: state
      entity_id: binary_sensor.door_bathroom
      state: 'on'
    - condition: state
      entity_id: binary_sensor.motion_mirror
      state: 'off'
  action:
    - service: light.turn_off
      entity_id: light.bathroom

- alias: 'Feed ze animal 7:20&14&18'
  id: 'Feed ze animal 7:20&14&18'
  initial_state: true
  trigger:
    - platform: time
      at: '07:20'
    - platform: time
      at: '14:00'
    - platform: time
      at: '18:00'
  action:
    - service: switch.turn_on
      entity_id: switch.riki_s_food

- alias: 'New guest discovered'
  id: 'New guest discovered'
  initial_state: true
  trigger:
    - platform: event
      # event_type: device_tracker_new_device
      event_type: entity_registry_updated
      event_data:
        action: create
  condition:
    - condition: template
      value_template: "{{ trigger.event.data.entity_id | regex_match('device_tracker') }}"
  action:
    - service: shell_command.echo_groups
      data_template:
        arg: '{{ trigger.event.data.entity_id }}'
    - service: group.reload

- alias: 'New device discovered'
  id: 'New device discovered'
  initial_state: true
  trigger:
    - platform: event
      # event_type: device_tracker_new_device
      event_type: entity_registry_updated
      event_data:
        action: create
  action:
    - service: notify.hass
      data_template:
        title: New device discovered
        message: >
         Entity ID {{ trigger.event.data.entity_id }}{{ "\n" }}
         IP {{ state_attr(trigger.event.data.entity_id, 'ip') }}{{ "\n" }}
         MAC {{ state_attr(trigger.event.data.entity_id, 'mac') }}{{ "\n" }}
         OUI {{ state_attr(trigger.event.data.entity_id, 'oui') }}{{ "\n" }}

- alias: 'Launch Notify'
  id: 'Launch Notify'
  initial_state: true
  trigger:
    - platform: template
      value_template: "{{ as_timestamp(now()) > states('sensor.spacex') - 3600 }}"
    - platform: template
      value_template: '{{ (now().strftime("%s") | int + 600) == (as_timestamp(states.sensor.launch.attributes.launch_time) | int) }}'
  action:
    - service: script.spacex

- alias: 'Smoke'
  id: 'Smoke'
  initial_state: true
  trigger: 
    - platform: state
      entity_id: binary_sensor.smoke
      to: 'on'
  action: 
    - service: notify.hass
      data:
        title: ARDE
        message: 'Fum, fum, fum...iese focu...iese focul'

- alias: 'nothing'
  initial_state: false
  trigger: []
  action: []

# - id: at_wc
#   alias: 'at WC'
#   id: aaaaa
#  initial_state: true
#   trigger:
#     - platform: state
#       entity_id: binary_sensor.motion_wc
#       to: 'on'
#   condition:
#     - condition: state
#       entity_id: sensor.house
#       state: 'Z'
#   action:
#     - delay: '00:00:02'
#     - service: automation.trigger
#       data_template:
#           entity_id: >
#             {% if as_timestamp(now()) - as_timestamp(states.automation.hallway_on.attributes.last_triggered) | int < 20 %} automation.hallway_off
#             {% else %} automation.nothing
#             {% endif %}
#     - service: automation.trigger
#       data_template:
#           entity_id: >
#             {% if as_timestamp(now()) - as_timestamp(states.automation.kitchen_on.attributes.last_triggered) | int < 20 %} automation.kitchen_off
#             {% else %} automation.nothing
#             {% endif %}
#     - service: automation.trigger
#       data_template:
#           entity_id: >
#             {% if as_timestamp(now()) - as_timestamp(states.automation.dota_table_on.attributes.last_triggered) | int < 20 %} automation.dota_table_off
#             {% else %} automation.nothing
#             {% endif %}

# - id: dota_auto
#   alias: 'Dota Auto'
#   id: aaaaa
#  initial_state: true
#   trigger:
#     - platform: state
#       entity_id: binary_sensor.motion_living
#       to: 'on'
#       for:
#         seconds: 30
#   condition:
#     - condition: template
#       value_template: '{{ as_timestamp(now()) - as_timestamp(states.binary_sensor.motion_table.last_changed) | int > 30 }}'
#     - condition: state
#       entity_id: light.table
#       state: 'on'
#   action:
#     - service: light.turn_off
#       entity_id: light.table

# - id: unavailable
#   alias: 'unavailable'
#   initial_state: false
#   trigger:
#     - platform: state
#       entity_id: light.bob, light.wc, light.kitchen, light.Hallway1, light.table
#       to: 'unavailable'
#       for:
#         seconds: 5
#   action:
#     - service: xiaomi_aqara.play_ringtone
#       data:
#         gw_mac: !secret xg_mac
#         ringtone_id: 10001
#         ringtone_vol: 3
#     - service: notify.hass
#       data_template:
#         message: '{{ states[trigger.entity_id.split(".")[0]][ trigger.entity_id.split(".")[1]].name }}'

# - id: Home_Alone
#   alias: 'Home Alone'
#   id: aaaaa
#  initial_state: true
#   trigger:
#     - platform: state
#       entity_id: binary_sensor.couch
#       to: 'off'
#     - platform: state
#       entity_id: group.lights
#       to: 'on'
#       for:
#         seconds: 10
#   condition:
#     condition: and
#     conditions:
#       - condition: state
#         entity_id: sensor.house
#         state: 'Z'
#       - condition: state
#         entity_id: sun.sun
#         state: 'below_horizon'
#       - condition: template
#         value_template: "{{states.binary_sensor.couch.state == 'off' or states.sensor.bed_occupancy.state != 'off'}}"
#       - condition: state
#         entity_id: input_boolean.guest
#         state: 'off'
#   action:
#     - service: automation.turn_off
#       data_template:
#         entity_id: >
#           {%- for state in states.automation if 'ON' in state.name -%}
#           {{- ", " if not loop.first-}}{{ state.entity_id }}{{-endif-}}
#           {%- endfor -%}
#     - service: light.turn_off
#       data_template:
#         entity_id: >
#           {%- for state in states.light if state.entity_id != 'light.spot' -%} 
#           {{- "," if not loop.first-}}{{ state.entity_id }}{{-endif-}}
#           {%- endfor -%}

# - id: house_mode_Z
#   alias: 'House mode Z'
#   id: aaaaa
#  initial_state: true
#   trigger:
#     - platform: state
#       entity_id: device_tracker.z
#       to: 'home'
#       for:
#         minutes: 1
#   condition:
#     - condition: state
#       entity_id: input_boolean.z
#       state: 'off'
#   action:
#     - service: homeassistant.turn_on
#       entity_id: input_boolean.z

# - id: house_mode_R
#   alias: 'House mode R'
#   id: aaaaa
#  initial_state: true
#   trigger:
#     - platform: state
#       entity_id: device_tracker.r, device_tracker.rpc, device_tracker.rdell
#       to: 'home'
#       for:
#         minutes: 1
#   condition:
#     - condition: state
#       entity_id: input_boolean.r
#       state: 'off'
#   action:
#     - service: homeassistant.turn_on
#       entity_id: input_boolean.r

# - id: in_bed
#   alias: 'In bed'
#   id: aaaaa
#  initial_state: true
#   trigger:
#     - platform: state
#       entity_id: group.lights
#       to: 'on'
#   condition:
#     - condition: state
#       entity_id: input_boolean.guest
#       state: 'off'
#     - condition: state
#       entity_id: sensor.bed_occupancy
#       state: 'double'
#   action:
#     - service: light.turn_off
#       entity_id: group.lights
#       data:
#         transition: 10


# - id: going_to_bed
#   alias: 'Going to bed'
#   id: aaaaa
#  initial_state: true
#   trigger:
#     - platform: state
#       entity_id: sensor.projector_status
#       to: 'off'
#   condition:
#     - condition: state
#       entity_id: sun.sun
#       state: 'below_horizon'
#   action:
#     - service: light.turn_on
#       entity_id: light.spot
#     - wait_template: '{{ states.binary_sensor.motion_living.state == "on" }}'
#       timeout: '00:00:20'
#       continue_on_timeout: false
#     - service: light.turn_off
#       entity_id: light.bob, light.spot

# - id: Unknown
#   alias: 'Home Unknown state'
#   id: aaaaa
#  initial_state: true
#   trigger:
#     - platform: state
#       entity_id: sensor.house
#       to: 'Unknown'
#       for:
#         seconds: 10
#   action:
#     - service: notify.hass
#       data_template:
#         message: 'vacation: {{states.input_boolean.vacation.state}}, away: {{states.input_boolean.away.state}}, guest: {{states.input_boolean.guest.state}}, z: {{states.input_boolean.z.state}}, r: {{states.input_boolean.r.state}}'

# - id: cube_rotate
#   alias: 'Cube rotate'
#   id: aaaaa
#  initial_state: true
#   trigger:
#     - platform: event
#       event_type: xiaomi_aqara.cube_action
#       event_data:
#         entity_id: binary_sensor.cube
#         action_type: rotate
#   action:
#     - service: homeassistant.toggle
#       entity_id: group.guster

# - id: tap_twice
#   alias: 'Cube tap'
#   id: aaaaa
#  initial_state: true
#   trigger:
#     - platform: event
#       event_type: xiaomi_aqara.cube_action
#       event_data:
#         entity_id: binary_sensor.cube
#         action_type: tap_twice
#   action:
#     - service: input_boolean.turn_off
#       entity_id: input_boolean.mmode
#     - service: light.turn_off
#       entity_id: light.kitchen, light.kitchen_strip, light.table, light.bob, light.bar

# - id: flip90
#   alias: 'Cube flip90'
#   id: aaaaa
#  initial_state: true
#   trigger:
#     - platform: event
#       event_type: xiaomi_aqara.cube_action
#       event_data:
#         entity_id: binary_sensor.cube
#         action_type: flip90
#   action:
#     - service: light.toggle
#       entity_id: light.kitchen,light.kitchen_strip,light.bar

# - id: flip180
#   alias: 'Cube flip180'
#   id: aaaaa
#  initial_state: true
#   trigger:
#     - platform: event
#       event_type: xiaomi_aqara.cube_action
#       event_data:
#         entity_id: binary_sensor.cube
#         action_type: flip180
#   action:
#     - service: light.toggle
#       entity_id: light.table

# - id: free_fall
#   alias: 'Cube toggle'
#   id: aaaaa
#  initial_state: true
#   trigger:
#     - platform: event
#       event_type: xiaomi_aqara.cube_action
#       event_data:
#         entity_id: binary_sensor.cube
#         action_type: free_fall
#   action:
#     - service: automation.toggle
#       entity_id: automation.cube_rotate, automation.cube_flip90, automation.cube_flip180, automation.cube_tap, automation.cube_shake
#     - service: light.toggle
#       entity_id: light.bob
#     - delay: '00:00:01'
#     - service: light.toggle
#       entity_id: light.bob

# - id: shake_air
#   alias: 'Cube shake'
#   id: aaaaa
#  initial_state: true
#   trigger:
#     - platform: event
#       event_type: xiaomi_aqara.cube_action
#       event_data:
#         entity_id: binary_sensor.cube
#         action_type: shake_air
#   action:
#     - service: light.toggle
#       entity_id: light.spot

# - id: shake_air_bob
#   alias: 'Cube shake bob'
#   id: aaaaa
#  initial_state: true
#   trigger:
#     - platform: event
#       event_type: xiaomi_aqara.cube_action
#       event_data:
#         entity_id: binary_sensor.cube
#         action_type: shake_air
#   action:
#     - service: light.turn_off
#       entity_id: light.bob
#     - service: input_boolean.turn_off
#       entity_id: input_boolean.mmode

# - id: move
#   alias: 'Cube move'
#   initial_state: false
#   hide_entity: true
#   trigger:
#     - platform: event
#       event_type: xiaomi_aqara.cube_action
#       event_data:
#         entity_id: binary_sensor.cube
#         action_type: move
#   action:
#     - service: mqtt.publish
#       data:
#         topic: say/Z
#         payload: 'Garage door triggered'
#         qos: 0
#     - service: notify.hass
#       data:
#         message: Hauarde

# - id: alert
#   alias: 'Cube Alert'
#   initial_state: false
#   hide_entity: true
#   trigger:
#     - platform: event
#       event_type: xiaomi_aqara.cube_action
#       event_data:
#         entity_id: binary_sensor.cube
#         action_type: alert
#   action:
#     - service: notify.hass
#       data_template:
#         title: test
#         message: '{{now().strftime("%H")}}'

# - id: swing
#   alias: 'Cube Swing'
#   id: aaaaa
#  initial_state: true
#   trigger:
#     - platform: event
#       event_type: xiaomi_aqara.cube_action
#       event_data:
#         entity_id: binary_sensor.cube
#         action_type: swing
#   action:
#     - service: notify.hass
#       data:
#         title: Swing
#         message: 'Cube swing'
