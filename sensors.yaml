# - platform: command_line
  # name: song
  # command: /bin/bash -c "cat /config/song"
  # scan_interval: 1200
  
- platform: command_line
  name: Door
  command: /bin/bash -c "/config/adb/adb.sh shell cat /storage/sdcard0/Android/data/com.xiaomi.smarthome/files/SherlockLog/$(date +%Y%m%d.log)|grep mOperateCommandType|tail -1| grep -oP '(?<=mOperateCommandType:).*?(?=\r)'||echo unknown"

# - platform: command_line
  # name: UPC
  # command:  /bin/bash -c "/config/upc.sh"
  # scan_interval: 1200

- platform: command_line
  name: storj
  command: /bin/bash -c "/config/storj_sensor.sh"
  scan_interval: 9000

- platform: command_line
  hidden: true
  name: firetv
  command: "egrep 'rror while setting up platform firetv|Update for media_player.firetv fails' /config/home-assistant.log | wc -l"

- platform: template
  sensors:
    battery:
      icon_template: >
        {% if states.sensor.battery.state != '' %}mdi:battery-alert
        {% else %}mdi:battery
        {% endif %}
      value_template: >
        {%- for item in states if (item.attributes.battery_level is defined) %}
        {%- if item.attributes.battery_level < 25 %}
        {{ item.attributes.battery_level }}
        {%- endif -%}
        {%- endfor -%}
      friendly_name_template: >
        {% if states.sensor.battery.state == '' %}Batteries Nominal
        {% else %}
        {%- for item in states if (item.attributes.battery_level is defined) %}
        {%- if item.attributes.battery_level < 25 %}
        {{ item.name }}
        {%- endif -%}
        {%- endfor -%}
        {% endif %}

    house:
      value_template: >
        {% if states.input_boolean.away.state == 'on' %}Away
        {% elif states.input_boolean.vacation.state == 'on' %}Vacation
        {% elif states.input_boolean.guest.state == 'on' %}Guest
        {% elif states.input_boolean.r.state == 'on' and states.input_boolean.z.state == 'on' %}Home
        {% elif states.input_boolean.away.state == 'off' and states.input_boolean.r.state == 'off' and states.input_boolean.z.state == 'on' %}Z
        {% elif states.input_boolean.away.state == 'off' and states.input_boolean.r.state == 'on' and states.input_boolean.z.state == 'off' %}Ro
        {% elif states.input_boolean.away.state == 'off' and states.input_boolean.vacation.state == 'off' and states.input_boolean.guest.state == 'off' and states.input_boolean.r.state == 'off' and states.input_boolean.z.state == 'off' %}Away
        {% else%}Unknown{% endif %}
    location:
      value_template: '{{ states.input_select.location.state }}'
      friendly_name: 'Location'
    cube_last:
      friendly_name: "Cube"
      value_template: '{{ states.binary_sensor.cube.attributes.last_action }}'
    dark_sky_template:
      value_template: "{{ states('sensor.dark_sky_summary') }}"
      icon_template: >
        {% if is_state('sensor.dark_sky_icon', 'clear-day') %}
          mdi:weather-sunny
        {% elif is_state('sensor.dark_sky_icon', 'clear-night') %}
          mdi:weather-night
        {% elif is_state('sensor.dark_sky_icon', 'rain') %}
          mdi:weather-rainy
        {% elif is_state('sensor.dark_sky_icon', 'snow') %}
          mdi:weather-snowy
        {% elif is_state('sensor.dark_sky_icon', 'sleet') %}
          mdi:weather-snowy-rainy
        {% elif is_state('sensor.dark_sky_icon', 'wind') %}
          mdi:weather-windy-variant
        {% elif is_state('sensor.dark_sky_icon', 'fog') %}
          mdi:weather-fog
        {% elif is_state('sensor.dark_sky_icon', 'cloudy') %}
          mdi:weather-cloudy
        {% elif is_state('sensor.dark_sky_icon', 'partly-cloudy-day') or is_state('sensor.dark_sky_icon', 'partly-cloudy-night') %}
          mdi:weather-partlycloudy
        {% elif is_state('sensor.dark_sky_icon', 'hail') %}
          mdi:weather-hail
        {% elif is_state('sensor.dark_sky_icon', 'thunderstorm') %}
          mdi:weather-lightning
        {% else %}
          mdi:help-circle
        {% endif %}
    couch:
      value_template: "{% if is_state('binary_sensor.couch', 'off') %}Detected{% else %}Clear{% endif %}"
    projector_status:
      value_template: >-
        {%- if states.sensor.t_power.state|int > 200 -%}
          on
        {% else %}
          off
        {% endif %} 
        
    # location:
      # friendly_name: 'Location'
      # value_template: >
        # {%- set sensors = [states.binary_sensor.motion_sensor_wc, states.binary_sensor.motion_sensor_kitchen, states.binary_sensor.motion_sensor_living, states.binary_sensor.motion_sensor_hallway, states.sensor.bob, states.sensor.table_pir, states.sensor.entrance, states.binary_sensor.couch] %}
        # {% for sensor in sensors %}
            # {% if as_timestamp(sensor.last_changed) == as_timestamp(sensors | map(attribute='last_changed') | max) %}
              # {% if sensor.state == 'ON' %}
                 # {{ sensor.name }}
              # {% endif %}
            # {% endif %}
        # {% endfor %}
    
#- platform: waze_travel_time
#  name: "Travel Time"
#  origin: !secret waze_origin
#  destination: !secret waze_destination
#  origin: !secret waze_origin_gps
#  destination: !secret waze_destination_gps
#  region: 'EU'
- platform: mqtt
  name: "Tautulli"
  state_topic: "plex/player/"
  value_template: "{{ value_json.body }}"

- platform: mqtt
  name: "table pir"
  state_topic: "table/PIR/cmnd/POWER1"

- platform: mqtt
  name: "bob"
  state_topic: "bob/PIR/cmnd/POWER1"

- platform: mqtt
  name: "Today"
  state_topic: "martor/tele/SENSOR"
  value_template: "{{ value_json.ENERGY.Today }}"
  unit_of_measurement: "kWh"

- platform: mqtt
  name: "Power"
  state_topic: "martor/tele/SENSOR"
  value_template: "{{ value_json.ENERGY.Power }}"
  unit_of_measurement: "W"

- platform: mqtt
  name: "Voltage"
  state_topic: "martor/tele/SENSOR"
  value_template: "{{ value_json.ENERGY.Voltage }}"
  unit_of_measurement: "V"

- platform: mqtt  
  name: "Yesterday"  
  state_topic: "martor/tele/SENSOR"
  value_template: "{{ value_json.ENERGY.Yesterday }}"  
  unit_of_measurement: "kWh"  

- platform: mqtt
  name: "Total since 04/Feb"
  state_topic: "martor/tele/SENSOR"
  value_template: "{{ value_json.ENERGY.Total }}"
  unit_of_measurement: "kWh"

- platform: mqtt
  name: "Uptime"
  state_topic: "martor/tele/STATE"
  value_template: "{{ value_json.Uptime }}"
  unit_of_measurement: "Hours"

- platform: mqtt
  name: "T_Today"
  state_topic: "tele/trantor/SENSOR"
  value_template: "{{ value_json.ENERGY.Today }}"
  unit_of_measurement: "kWh"

- platform: mqtt
  name: "T_Power"
  state_topic: "tele/trantor/SENSOR"
  value_template: "{{ value_json.ENERGY.Power }}"
  unit_of_measurement: "W"

- platform: mqtt
  name: "T_Voltage"
  state_topic: "tele/trantor/SENSOR"
  value_template: "{{ value_json.ENERGY.Voltage }}"
  unit_of_measurement: "V"

- platform: mqtt  
  name: "T_Yesterday"  
  state_topic: "tele/trantor/SENSOR"
  value_template: "{{ value_json.ENERGY.Yesterday }}"  
  unit_of_measurement: "kWh"  

- platform: mqtt
  name: "T_Total since 17/Mar"
  state_topic: "tele/trantor/SENSOR"
  value_template: "{{ value_json.ENERGY.Total }}"
  unit_of_measurement: "kWh"

- platform: mqtt
  name: entrance
  state_topic: "home/niggers/hallway1"

- platform: plex
  host: !secret plex_host
  token: !secret plex_token

- platform: systemmonitor
  resources:
     - type: disk_use_percent
       arg: /
     - type: memory_use_percent
     - type: processor_use
     - type: load_1m
     - type: load_5m
     - type: load_15m
     - type: last_boot

- platform: command_line
  name: CPU temp
  command: "cat /sys/class/thermal/thermal_zone0/temp"
  unit_of_measurement: "Â°C"
  value_template: '{{ (value | multiply(0.001)) | round(1) }}'

- platform: yr
  forecast: 24
  monitored_conditions:
     - temperature
     - symbol
     - precipitation
     - windSpeed
     - cloudiness

- platform: darksky
  api_key: !secret darksky_api
  monitored_conditions:
      - summary
      - icon
      - apparent_temperature
      - cloud_cover
      - hourly_summary
      - apparent_temperature_high
      - apparent_temperature_low
      - precip_probability

- platform: command_line
  name: Zalendar
  command: cat /config/Z.cal
  scan_interval: 9000

- platform: command_line
  name: Ralendar
  command: cat /config/R.cal
  scan_interval: 9000

- platform: command_line
  name: quote_of_the_day
  command: curl -s 'http://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang=en'|awk -F '"' '{printf $4}'|tr -d '\\'
  scan_interval: 43200

- platform: rest
  name: SpaceX
  json_attributes:
    - launch_site
    - rocket
    - links
  value_template: '{{ value_json["launch_date_unix"] }}'
  resource: 'https://api.spacexdata.com/v3/launches/next'
#https://api.spacexdata.com/v2/launches/next?pretty=true
  
- platform: template
  sensors:
    spacex_next_rocket:
      friendly_name: 'Rocket'
      value_template: '{{ states.sensor.spacex.attributes["rocket"]["rocket_name"] }}'
    spacex_next_launch_day:
      friendly_name: 'Launch Day'
      value_template: '{{ states.sensor.spacex.state | int | timestamp_custom("%d.%m.%Y")}}'
    spacex_next_launch_time:
      friendly_name: 'Launch Time'
      value_template: '{{ states.sensor.spacex.state | int | timestamp_custom("%H:%M")}}'
      unit_of_measurement: 'h'
    spacex_next_mission_video_link:
      friendly_name: 'Mission Video Link'
      value_template: '{{ states.sensor.spacex.attributes.links.video_link }}'
    spacex_next_launch_site_name_long:
      friendly_name: 'Launch Site'
      value_template: '{{ states.sensor.spacex.attributes["launch_site"]["site_name_long"] }}'