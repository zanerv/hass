- platform: mqtt
  name: 'vibration'
  state_topic: 'zigbee2mqtt/vibration'
  json_attributes_topic: 'zigbee2mqtt/vibration'
  availability_topic: 'zigbee2mqtt/bridge/state'
  icon: mdi:gesture-double-tap
  value_template: '{{ value_json.action }}'
    
# - platform: sql
#   scan_interval: 86400
#   queries:
#     - name: storj yesterday
#       query: "SELECT MAX(state)-MIN(state) AS value FROM states WHERE entity_id='sensor.storj_today' AND state!='unknown' AND datetime(last_changed) BETWEEN datetime(date('now', '-1 days')) AND datetime(date('now'));"
#       column: 'value'
#       unit_of_measurement: 'Gb'
- platform: statistics
  entity_id: sensor.storj

- platform: history_stats
  name: Sleep
  entity_id: input_boolean.sleep
  state: 'on'
  type: time
  start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
  duration:
    days: 1
    
- platform: history_stats
  name: rSleep
  entity_id: input_boolean.r_sleep
  state: 'on'
  type: time
  start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
  duration:
    days: 1
    
- platform: uptime
  unit_of_measurement: 'minutes'
  name: hassan uptime

- platform: launch_library
  name: Launch

- platform: time_date
  display_options:
  - 'time'

- platform: command_line
  name: Door Lock
  command: /bin/bash -c "adb shell cat /storage/sdcard0/Android/data/com.xiaomi.smarthome/files/SherlockLog/$(date +%Y%m%d.log)|grep mOperateCommandType|tail -1| awk -F ':' '{print $5}'||echo unknown"
  scan_interval: 900
 
- platform: command_line
  name: storj
  unit_of_measurement: 'Gb'
  value_template: '{{ (value | int / 1000000000) | round }}'
  # command: du -sm /config/storj|awk '{print $1}'
  command: /config/storjV3.sh diskSpace
  scan_interval: 900 
 
- platform: command_line
  name: storj bandwidth
  unit_of_measurement: 'Gb'
  value_template: '{{ (value | int / 1000000000) | round }}'
  command: /config/storjV3.sh bandwidth
  scan_interval: 900

- platform: mqtt
  name: "mk storj bandwidth"
  state_topic: "storj/storj_bandwidth"
  value_template: '{{ value | int }}'
  unit_of_measurement: 'Gb'

- platform: mqtt
  name: "mk storj"
  state_topic: "storj/storj"
  value_template: '{{ value | int }}'
  unit_of_measurement: 'Gb'

- platform: template
  sensors:
    rosu_rssi:
      device_class: signal_strength
      unit_of_measurement: "dBm"
      value_template: >-
        {% if is_state("device_tracker.z", "home") %}
          {{ states.device_tracker.z.attributes.rssi }}
        {% else %}
          -99
        {% endif %}
    rosu_ap:
      value_template: >-  
        {% if is_state("device_tracker.z", "home") and state_attr("device_tracker.z", "ap_mac") == "fc:ec:da:96:62:ef" %}  
          Living
        {% elif is_state("device_tracker.z", "home") and state_attr("device_tracker.z", "ap_mac") == "fc:ec:da:89:65:05" %}
          Hallway
        {% else %}
          Away
        {% endif %}
        
    pink_rssi:
      device_class: signal_strength
      unit_of_measurement: "dBm"
      value_template: >-
        {% if is_state("device_tracker.r", "home") %}              
          {{ states.device_tracker.r.attributes.rssi }}              
        {% else %}
          -99
        {% endif %}
    pink_ap:
      value_template: >-
        {% if is_state("device_tracker.r", "home") and state_attr("device_tracker.r", "ap_mac") == "fc:ec:da:96:62:ef" %}
          Living
        {% elif is_state("device_tracker.r", "home") and state_attr("device_tracker.r", "ap_mac") == "fc:ec:da:89:65:05" %}
          Hallway
        {% else %}
          Away
        {% endif %}

    battery:
      entity_id: binary_sensor.door_bedroom
      icon_template: >
        {% if states.sensor.battery.state != '' %}mdi:battery-alert
        {% else %}mdi:battery
        {% endif %}
      value_template: >
        {%- for item in states if (item.attributes.battery_level is defined) %}
        {%- if item.attributes.battery_level < 25 %}
        {{ item.attributes.battery_level }}
        {%- endif -%}
        {%- endfor -%}
      friendly_name_template: >
        {% if states.sensor.battery.state == '' %}Batteries Nominal
        {% else %}
        {%- for item in states if (item.attributes.battery_level is defined) %}
        {%- if item.attributes.battery_level < 25 %}
        {{ item.name }}
        {%- endif -%}
        {%- endfor -%}
        {% endif %}

    bed:
      unit_of_measurement: 'pers'
      value_template: >
        {% if states.sensor.bed_occupancy.state == 'off' %}0
        {% elif states.sensor.bed_occupancy.state == 'on' %}1
        {% elif states.sensor.bed_occupancy.state == 'double' %}2
        {% else%}Unknown{% endif %}

    house:
      value_template: >
        {% if states.input_boolean.away.state == 'on' %}Away
        {% elif states.input_boolean.vacation.state == 'on' %}Vacation
        {% elif states.input_boolean.guest.state == 'on' %}Guest
        {% elif states.input_boolean.r.state == 'on' and states.input_boolean.z.state == 'on' %}Home
        {% elif states.input_boolean.away.state == 'off' and states.input_boolean.r.state == 'off' and states.input_boolean.z.state == 'on' %}Z
        {% elif states.input_boolean.away.state == 'off' and states.input_boolean.r.state == 'on' and states.input_boolean.z.state == 'off' %}Ro
        {% elif states.input_boolean.away.state == 'off' and states.input_boolean.vacation.state == 'off' and states.input_boolean.guest.state == 'off' and states.input_boolean.r.state == 'off' and states.input_boolean.z.state == 'off' %}Away
        {% else%}Unknown{% endif %}
    location:
      value_template: '{{ states.input_select.location.state }}'
      friendly_name: 'Location'
    # couch:
    #   value_template: "{% if is_state('binary_sensor.couch', 'off') %}Detected{% else %}Clear{% endif %}"
    # projector_status:
    #   value_template: >-
    #     {%- if states.sensor.t_power.state|int > 200 -%}
    #       on
    #     {% else %}
    #       off
    #     {% endif %} 
        
    # location:
      # friendly_name: 'Location'
      # value_template: >
        # {%- set sensors = [states.binary_sensor.motion_wc, states.binary_sensor.motion_kitchen, states.binary_sensor.motion_living, states.binary_sensor.motion_hallway, states.binary_sensor.motion_spot, states.binary_sensor.motion_table, states.sensor.entrance, states.binary_sensor.couch] %}
        # {% for sensor in sensors %}
            # {% if as_timestamp(sensor.last_changed) == as_timestamp(sensors | map(attribute='last_changed') | max) %}
              # {% if sensor.state == 'on' %}
                 # {{ sensor.name }}
              # {% endif %}
            # {% endif %}
        # {% endfor %}
    
# - platform: waze_travel_time
#   name: "Travel Time"
#   origin: !secret waze_origin
#   destination: !secret waze_destination
#   # origin: !secret waze_origin_gps
#   # destination: !secret waze_destination_gps
#   region: 'EU'
  
- platform: tautulli
  name: "Tautulli"
  host: !secret tau_host
  port: 80
  api_key: !secret tau_api
  monitored_users: zanerv

- platform: mqtt
  name: "Socket Table"
  state_topic: "tele/socket_table/SENSOR"
  value_template: "{{ value_json.ENERGY.Power }}"
  unit_of_measurement: "W"
  
- platform: mqtt
  name: "TV"
  state_topic: "tele/socket_tv/SENSOR"
  value_template: "{{ value_json.ENERGY.Power }}"
  unit_of_measurement: "W"
  
- platform: mqtt
  name: "Fridge"
  state_topic: "tele/socket_fridge/SENSOR"
  value_template: "{{ value_json.ENERGY.Power }}"
  unit_of_measurement: "W"
  icon: mdi:fridge-outline
  
- platform: mqtt
  name: "Bed Occupancy"
  state_topic: "/room/bedroom/bed/status"
  icon: mdi:hotel

- platform: mqtt
  name: "Laptop"
  state_topic: "/home/laptop/title"
  icon: mdi:laptop

- platform: mqtt
  state_topic: !secret bt_z
  value_template: '{{ value_json.confidence }}'
  unit_of_measurement: '%'
  name: 'Z'

- platform: mqtt
  state_topic: !secret bt_ro
  value_template: '{{ value_json.confidence }}'
  unit_of_measurement: '%'
  name: 'ro'

- platform: mqtt
  name: "Today"
  state_topic: "martor/tele/SENSOR"
  value_template: "{{ value_json.ENERGY.Today }}"
  unit_of_measurement: "kWh"

- platform: mqtt
  name: "Power"
  state_topic: "martor/tele/SENSOR"
  value_template: "{{ value_json.ENERGY.Power }}"
  unit_of_measurement: "W"

- platform: mqtt
  name: "Voltage"
  state_topic: "martor/tele/SENSOR"
  value_template: "{{ value_json.ENERGY.Voltage }}"
  unit_of_measurement: "V"

- platform: mqtt  
  name: "Yesterday"  
  state_topic: "martor/tele/SENSOR"
  value_template: "{{ value_json.ENERGY.Yesterday }}"  
  unit_of_measurement: "kWh"  

- platform: mqtt
  name: "Total since 04/Feb"
  state_topic: "martor/tele/SENSOR"
  value_template: "{{ value_json.ENERGY.Total }}"
  unit_of_measurement: "kWh"

- platform: mqtt
  name: "Uptime"
  state_topic: "martor/tele/STATE"
  value_template: "{{ value_json.Uptime }}"
  unit_of_measurement: "Hours"

- platform: mqtt
  name: "T_Today"
  state_topic: "tele/trantor/SENSOR"
  value_template: "{{ value_json.ENERGY.Today }}"
  unit_of_measurement: "kWh"

- platform: mqtt
  name: "T_Power"
  state_topic: "tele/trantor/SENSOR"
  value_template: "{{ value_json.ENERGY.Power }}"
  unit_of_measurement: "W"

- platform: mqtt
  name: "T_Voltage"
  state_topic: "tele/trantor/SENSOR"
  value_template: "{{ value_json.ENERGY.Voltage }}"
  unit_of_measurement: "V"

- platform: mqtt  
  name: "T_Yesterday"  
  state_topic: "tele/trantor/SENSOR"
  value_template: "{{ value_json.ENERGY.Yesterday }}"  
  unit_of_measurement: "kWh"  

- platform: mqtt
  name: "T_Total since 17/Mar"
  state_topic: "tele/trantor/SENSOR"
  value_template: "{{ value_json.ENERGY.Total }}"
  unit_of_measurement: "kWh"

- platform: mqtt
  name: entrance
  state_topic: "home/niggers/hallway1"

- platform: systemmonitor
  resources:
     - type: disk_use_percent
       arg: /
     - type: memory_use_percent
     - type: processor_use
     - type: load_1m
     - type: load_5m
     - type: load_15m
     - type: last_boot

- platform: command_line
  name: CPU temp
  command: "cat /sys/class/thermal/thermal_zone0/temp"
  unit_of_measurement: "°C"
  value_template: '{{ (value | multiply(0.001)) | round(1) }}'
  scan_interval: 600

- platform: darksky
  api_key: !secret darksky_api
  forecast:
   - 0
  monitored_conditions:
      - apparent_temperature
      - apparent_temperature_high
      - apparent_temperature_low
      - summary
      - hourly_summary
      - precip_probability

- platform: command_line
  name: Zalendar
  command: cat /config/Z.cal
  scan_interval: 1800

- platform: command_line
  name: Ralendar
  command: cat /config/R.cal
  scan_interval: 9000

- platform: command_line
  name: quote_of_the_day
  command: curl -s 'http://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang=en'|awk -F '"' '{printf $4}'|tr -d '\\'
  scan_interval: 43200

- platform: rest
  name: SpaceX
  json_attributes:
    - launch_site
    - rocket
    - links
  value_template: '{{ value_json["launch_date_unix"] }}'
  resource: 'https://api.spacexdata.com/v3/launches/next'
#https://api.spacexdata.com/v2/launches/next?pretty=true
  
- platform: template
  sensors:
    spacex_next_rocket:
      friendly_name: 'Rocket'
      value_template: '{{ states.sensor.spacex.attributes["rocket"]["rocket_name"] }}'
    spacex_next_launch_day:
      friendly_name: 'Launch Day'
      value_template: '{{ states("sensor.spacex") | int | timestamp_custom("%d.%m.%Y")}}'
    spacex_next_launch_time:
      friendly_name: 'Launch Time'
      value_template: '{{ states("sensor.spacex") | int | timestamp_custom("%H:%M")}}'
      unit_of_measurement: 'h'
    spacex_next_mission_video_link:
      friendly_name: 'Mission Video Link'
      value_template: '{{ state_attr("sensor.launch", "links.video_link") }}'
    spacex_next_launch_site_name_long:
      friendly_name: 'Launch Site'
      value_template: '{{ state_attr("sensor.spacex", "launch_site")["site_name_long"] }}'

    launch_day:
      friendly_name: 'Launch Day'
      value_template: '{{ as_timestamp(state_attr("sensor.launch", "launch_time")) | int | timestamp_custom("%d.%m.%Y")}}'
    launch_time:
      friendly_name: 'Launch Time'
      value_template: '{{ as_timestamp(state_attr("sensor.launch", "launch_time")) | int | timestamp_custom("%H:%M")}}'
      unit_of_measurement: 'h'
    mission_video_link:
      friendly_name: 'Mission Video Link'
      value_template: '{{state_attr("sensor.launch", "stream")}}'
